server:
  listenAddress: 0.0.0.0
  port: 8090
  #Server Mode: one of => debug, release, test
  mode: debug

logging:
  # debug, info, warn, error, fatal, panic
  level: "debug"
  # console or json
  format: "console"

security:
  authN:
    provider: ["bearer"]
    openid:
      clientId: confidential-oidc-client
      clientSecret: secret1
      issuerUri: http://keycloak:7080/realms/master
      redirectUri: http://localhost:8090/oauth2/callback
      cookieSecret: secret1!
      scope: "openid+profile+email+roles"
      rolesAttributePath: "realm_access.roles"
      groupsAttributePath: "realm_access.groups"
    bearer:
      issuerUri: http://keycloak:7080/realms/master
      jwksURL: http://keycloak:7080/realms/master/protocol/openid-connect/certs
      rolesAttributePath: "realm_access.roles"
      groupsAttributePath: "realm_access.groups"
      skipIssuerCheck: false
      skipSignatureCheck: false
    # Static users for sandbox testing
    basic:
      - login: "dev1"
        password: "passW!"
        firstName: "dev1"
        lastName: "dev"
        email: "dev1.dev@example.org"
        roles: ["developers", "team1"]
  authZ:
    provider: file
    file:
      modelPath: ".local/authz-model.conf"
      policyPath: ".local/authz-policy.csv"
    database:
      host: "localhost"
      port: 5432
      username: "adm"
      password: "passDB!"
      name: "okdp"
  cors:
    allowedOrigins: ["*"]
    allowedMethods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"]
    allowedHeaders: ["Origin", "Accept", "Authorization", "Content-Length", "Content-Type"]
    exposedHeaders: ["Content-Length"]
    allowCredentials: true 
    maxAge: 3600
  headers:
    X-Frame-Options: "DENY"
    X-Content-Type-Options: nosniff

swagger:
  securitySchemes:
    # openId:
    #   type: openIdConnect
    #   openIdConnectUrl: http://keycloak:7080/realms/master/.well-known/openid-configuration
    # access_token:
    #   type: http
    #   scheme: bearer
    #   bearerFormat: JWT
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://keycloak:7080/realms/master/protocol/openid-connect/auth
          tokenUrl: http://keycloak:7080/realms/master/protocol/openid-connect/token
          scopes: 
            openid: OpenId Authentication
            email: User Email
            profile: User Profile
            roles: User Roles
  security:
    - oauth2: [openid, email, profile, roles]


# packages:
#   - repo: quay.io/kubocd/packages
#     name: redis
#     versions: [""]
#   - repo: quay.io/kubocd/packages
#     name: minio
#     versions: [""]
#   - repo: quay.io/kubocd/packages
#     name: cnpg
#     versions: [""]

catalog:
  - id: storage
    name: Storage catalog
    description: My Storage packages
    repoUrl: quay.io/kubocd/packages
    ### public registry, no credentials needed
    #credentials:
    #  robotAccountName: $(OCI_USERNAME)
    #  robotAccountToken: $(OCI_PASSWORD)
    #  dockerconfigjson: $(DOCKER_CONFIG_JSON)
    packages:
      - name: redis
      - name: minio
      - name: cnpg

  - id: auth
    name: Auth catalog
    description: My Auth packages
    repoUrl: quay.io/kubocd/packages
    packages:
      - name: openldap

  - id: infra
    name: Infra catalog
    description: My Infra packages
    repoUrl: quay.io/kubocd/packages
    packages:
      - name: cert-manager
      - name: ingress-nginx
      - name: metallb

  - id: stack
    name: Stack catalog
    description: My Stack packages
    repoUrl: quay.io/kubocd/packages
    packages:
      - name: podinfo

  - id: Dataviz
    name: Dataviz catalog
    description: My Dataviz packages
    repoUrl: quay.io/okdp/sandbox-packages
    packages:
      - name: superset

  - id: Notebooks
    name: Notebooks catalog
    description: My Notebooks packages
    repoUrl: quay.io/okdp/sandbox-packages
    packages:
      - name: jupyterhub

  - id: Spark
    name: Spark catalog
    description: My Spark packages
    repoUrl: quay.io/okdp/sandbox-packages
    packages:
      - name: spark-history-server

clusters:
  - id: kubo1
    name: My k8s cluster 1
    env: dev
    auth:
      # inCluster: true
      kubeconfig:
        apiServer: https://host.docker.internal:56660
        path: /tmp/.kube/config
        # When not provided, use current context
        # context: kind-kind-okdp-sandbox
        insecureSkipTlsVerify: true
      # certificate:
      #   apiServer: https://k8s-api-server-url:6443
      #   clientKey: /path/to/client-key.pem
      #   clientCert: /path/to/client-cert.pem
      #   caCert: /path/to/ca-cert.pem
      # bearer:
      #   apiServer: https://k8s-api-server-url:6443
      #   bearerToken: $(BEARER_TOKEN)
  # - id: kubo2
  #   name: My k8s cluster 2
  #   env: dev
  #   auth:
  #     # inCluster: true
  #     kubeconfig:
  #       apiServer: https://host.docker.internal:55192
  #       path: /tmp/.kube/config
  #       # When not provided, use current context
  #       # context: kind-okdp-sandbox
  #       insecureSkipTlsVerify: true
  #     # certificate:
  #     #   apiServer: https://k8s-api-server-url:6443
  #     #   clientKey: /path/to/client-key.pem
  #     #   clientCert: /path/to/client-cert.pem
  #     #   caCert: /path/to/ca-cert.pem
  #     # bearer:
  #     #   apiServer: https://k8s-api-server-url:6443
  #     #   bearerToken: $(BEARER_TOKEN)

