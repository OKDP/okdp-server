// Package _deployments provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _deployments

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	Oauth2Scopes    = "oauth2.Scopes"
)

// CreateDeploymentJSONBody defines parameters for CreateDeployment.
type CreateDeploymentJSONBody struct {
	ToDo1 string `json:"ToDo1"`
	ToDo2 string `json:"toDo2"`
	ToDo3 string `json:"toDo3"`
	ToDo4 string `json:"toDo4"`
}

// UpdateDeploymentJSONBody defines parameters for UpdateDeployment.
type UpdateDeploymentJSONBody struct {
	ToDo1 string `json:"ToDo1"`
	ToDo2 string `json:"toDo2"`
	ToDo3 string `json:"toDo3"`
	ToDo4 string `json:"toDo4"`
}

// CreateDeploymentJSONRequestBody defines body for CreateDeployment for application/json ContentType.
type CreateDeploymentJSONRequestBody CreateDeploymentJSONBody

// UpdateDeploymentJSONRequestBody defines body for UpdateDeployment for application/json ContentType.
type UpdateDeploymentJSONRequestBody UpdateDeploymentJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all deployments
	// (GET /spaces/{spaceId}/composition/{compositionId}/deployment)
	ListDeployments(c *gin.Context, spaceId string, compositionId string)
	// Create a new deployment
	// (POST /spaces/{spaceId}/composition/{compositionId}/deployment)
	CreateDeployment(c *gin.Context, spaceId string, compositionId string)
	// Delete a deployment
	// (DELETE /spaces/{spaceId}/composition/{compositionId}/deployment/{deploymentId})
	DeleteDeployment(c *gin.Context, spaceId string, compositionId string, deploymentId string)
	// Get a deployment by deploymentId
	// (GET /spaces/{spaceId}/composition/{compositionId}/deployment/{deploymentId})
	GetDeployments(c *gin.Context, spaceId string, compositionId string, deploymentId string)
	// Update a deployment
	// (PUT /spaces/{spaceId}/composition/{compositionId}/deployment/{deploymentId})
	UpdateDeployment(c *gin.Context, spaceId string, compositionId string, deploymentId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListDeployments operation middleware
func (siw *ServerInterfaceWrapper) ListDeployments(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "compositionId" -------------
	var compositionId string

	err = runtime.BindStyledParameterWithOptions("simple", "compositionId", c.Param("compositionId"), &compositionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter compositionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDeployments(c, spaceId, compositionId)
}

// CreateDeployment operation middleware
func (siw *ServerInterfaceWrapper) CreateDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "compositionId" -------------
	var compositionId string

	err = runtime.BindStyledParameterWithOptions("simple", "compositionId", c.Param("compositionId"), &compositionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter compositionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDeployment(c, spaceId, compositionId)
}

// DeleteDeployment operation middleware
func (siw *ServerInterfaceWrapper) DeleteDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "compositionId" -------------
	var compositionId string

	err = runtime.BindStyledParameterWithOptions("simple", "compositionId", c.Param("compositionId"), &compositionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter compositionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDeployment(c, spaceId, compositionId, deploymentId)
}

// GetDeployments operation middleware
func (siw *ServerInterfaceWrapper) GetDeployments(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "compositionId" -------------
	var compositionId string

	err = runtime.BindStyledParameterWithOptions("simple", "compositionId", c.Param("compositionId"), &compositionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter compositionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeployments(c, spaceId, compositionId, deploymentId)
}

// UpdateDeployment operation middleware
func (siw *ServerInterfaceWrapper) UpdateDeployment(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "compositionId" -------------
	var compositionId string

	err = runtime.BindStyledParameterWithOptions("simple", "compositionId", c.Param("compositionId"), &compositionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter compositionId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "deploymentId" -------------
	var deploymentId string

	err = runtime.BindStyledParameterWithOptions("simple", "deploymentId", c.Param("deploymentId"), &deploymentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter deploymentId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDeployment(c, spaceId, compositionId, deploymentId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/spaces/:spaceId/composition/:compositionId/deployment", wrapper.ListDeployments)
	router.POST(options.BaseURL+"/spaces/:spaceId/composition/:compositionId/deployment", wrapper.CreateDeployment)
	router.DELETE(options.BaseURL+"/spaces/:spaceId/composition/:compositionId/deployment/:deploymentId", wrapper.DeleteDeployment)
	router.GET(options.BaseURL+"/spaces/:spaceId/composition/:compositionId/deployment/:deploymentId", wrapper.GetDeployments)
	router.PUT(options.BaseURL+"/spaces/:spaceId/composition/:compositionId/deployment/:deploymentId", wrapper.UpdateDeployment)
}
