// Package _catalogs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _catalogs

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all catalogs
	// (GET /catalogs)
	ListCatalogs(c *gin.Context)
	// Get a catalog by id
	// (GET /catalogs/{catalogId})
	GetCatalog(c *gin.Context, catalogId string)
	// Get a list of packages by catalog id
	// (GET /catalogs/{catalogId}/packages)
	ListPackages(c *gin.Context, catalogId string)
	// Get package by catalog id and package name
	// (GET /catalogs/{catalogId}/packages/{name})
	GetPackage(c *gin.Context, catalogId string, name string)
	// List versions for a specific package
	// (GET /catalogs/{catalogId}/packages/{name}/versions)
	GetPackageVersions(c *gin.Context, catalogId string, name string)
	// Get package definition
	// (GET /catalogs/{catalogId}/packages/{name}/versions/{version})
	GetPackageDefinition(c *gin.Context, catalogId string, name string, version string)
	// Get package schema (parameters, context, etc)
	// (GET /catalogs/{catalogId}/packages/{name}/versions/{version}/schema)
	GetPackageSchema(c *gin.Context, catalogId string, name string, version string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListCatalogs operation middleware
func (siw *ServerInterfaceWrapper) ListCatalogs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListCatalogs(c)
}

// GetCatalog operation middleware
func (siw *ServerInterfaceWrapper) GetCatalog(c *gin.Context) {

	var err error

	// ------------- Path parameter "catalogId" -------------
	var catalogId string

	err = runtime.BindStyledParameterWithOptions("simple", "catalogId", c.Param("catalogId"), &catalogId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalogId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCatalog(c, catalogId)
}

// ListPackages operation middleware
func (siw *ServerInterfaceWrapper) ListPackages(c *gin.Context) {

	var err error

	// ------------- Path parameter "catalogId" -------------
	var catalogId string

	err = runtime.BindStyledParameterWithOptions("simple", "catalogId", c.Param("catalogId"), &catalogId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalogId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListPackages(c, catalogId)
}

// GetPackage operation middleware
func (siw *ServerInterfaceWrapper) GetPackage(c *gin.Context) {

	var err error

	// ------------- Path parameter "catalogId" -------------
	var catalogId string

	err = runtime.BindStyledParameterWithOptions("simple", "catalogId", c.Param("catalogId"), &catalogId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalogId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPackage(c, catalogId, name)
}

// GetPackageVersions operation middleware
func (siw *ServerInterfaceWrapper) GetPackageVersions(c *gin.Context) {

	var err error

	// ------------- Path parameter "catalogId" -------------
	var catalogId string

	err = runtime.BindStyledParameterWithOptions("simple", "catalogId", c.Param("catalogId"), &catalogId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalogId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPackageVersions(c, catalogId, name)
}

// GetPackageDefinition operation middleware
func (siw *ServerInterfaceWrapper) GetPackageDefinition(c *gin.Context) {

	var err error

	// ------------- Path parameter "catalogId" -------------
	var catalogId string

	err = runtime.BindStyledParameterWithOptions("simple", "catalogId", c.Param("catalogId"), &catalogId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalogId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPackageDefinition(c, catalogId, name, version)
}

// GetPackageSchema operation middleware
func (siw *ServerInterfaceWrapper) GetPackageSchema(c *gin.Context) {

	var err error

	// ------------- Path parameter "catalogId" -------------
	var catalogId string

	err = runtime.BindStyledParameterWithOptions("simple", "catalogId", c.Param("catalogId"), &catalogId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalogId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPackageSchema(c, catalogId, name, version)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/catalogs", wrapper.ListCatalogs)
	router.GET(options.BaseURL+"/catalogs/:catalogId", wrapper.GetCatalog)
	router.GET(options.BaseURL+"/catalogs/:catalogId/packages", wrapper.ListPackages)
	router.GET(options.BaseURL+"/catalogs/:catalogId/packages/:name", wrapper.GetPackage)
	router.GET(options.BaseURL+"/catalogs/:catalogId/packages/:name/versions", wrapper.GetPackageVersions)
	router.GET(options.BaseURL+"/catalogs/:catalogId/packages/:name/versions/:version", wrapper.GetPackageDefinition)
	router.GET(options.BaseURL+"/catalogs/:catalogId/packages/:name/versions/:version/schema", wrapper.GetPackageSchema)
}
