// Package _clusters provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _clusters

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CreateNamespaceJSONBodyKind.
const (
	CreateNamespaceJSONBodyKindNamespace CreateNamespaceJSONBodyKind = "Namespace"
)

// Defines values for CreateNamespaceJSONBodyStatusPhase.
const (
	CreateNamespaceJSONBodyStatusPhaseActive      CreateNamespaceJSONBodyStatusPhase = "Active"
	CreateNamespaceJSONBodyStatusPhaseTerminating CreateNamespaceJSONBodyStatusPhase = "Terminating"
)

// Defines values for UpdateNamespaceJSONBodyKind.
const (
	UpdateNamespaceJSONBodyKindNamespace UpdateNamespaceJSONBodyKind = "Namespace"
)

// Defines values for UpdateNamespaceJSONBodyStatusPhase.
const (
	UpdateNamespaceJSONBodyStatusPhaseActive      UpdateNamespaceJSONBodyStatusPhase = "Active"
	UpdateNamespaceJSONBodyStatusPhaseTerminating UpdateNamespaceJSONBodyStatusPhase = "Terminating"
)

// CreateNamespaceJSONBody defines parameters for CreateNamespace.
type CreateNamespaceJSONBody struct {
	ApiVersion string                      `json:"apiVersion"`
	Kind       CreateNamespaceJSONBodyKind `json:"kind"`
	Metadata   struct {
		Annotations       *map[string]string `json:"annotations,omitempty"`
		CreationTimestamp *time.Time         `json:"creationTimestamp,omitempty"`
		Labels            *map[string]string `json:"labels,omitempty"`
		Name              string             `json:"name"`
	} `json:"metadata"`
	Status *struct {
		Phase *CreateNamespaceJSONBodyStatusPhase `json:"phase,omitempty"`
	} `json:"status,omitempty"`
}

// CreateNamespaceJSONBodyKind defines parameters for CreateNamespace.
type CreateNamespaceJSONBodyKind string

// CreateNamespaceJSONBodyStatusPhase defines parameters for CreateNamespace.
type CreateNamespaceJSONBodyStatusPhase string

// UpdateNamespaceJSONBody defines parameters for UpdateNamespace.
type UpdateNamespaceJSONBody struct {
	ApiVersion string                      `json:"apiVersion"`
	Kind       UpdateNamespaceJSONBodyKind `json:"kind"`
	Metadata   struct {
		Annotations       *map[string]string `json:"annotations,omitempty"`
		CreationTimestamp *time.Time         `json:"creationTimestamp,omitempty"`
		Labels            *map[string]string `json:"labels,omitempty"`
		Name              string             `json:"name"`
	} `json:"metadata"`
	Status *struct {
		Phase *UpdateNamespaceJSONBodyStatusPhase `json:"phase,omitempty"`
	} `json:"status,omitempty"`
}

// UpdateNamespaceJSONBodyKind defines parameters for UpdateNamespace.
type UpdateNamespaceJSONBodyKind string

// UpdateNamespaceJSONBodyStatusPhase defines parameters for UpdateNamespace.
type UpdateNamespaceJSONBodyStatusPhase string

// CreateNamespaceJSONRequestBody defines body for CreateNamespace for application/json ContentType.
type CreateNamespaceJSONRequestBody CreateNamespaceJSONBody

// UpdateNamespaceJSONRequestBody defines body for UpdateNamespace for application/json ContentType.
type UpdateNamespaceJSONRequestBody UpdateNamespaceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all kubernetes clusters
	// (GET /clusters)
	ListClusters(c *gin.Context)
	// Get a kubernetes cluster by id
	// (GET /clusters/{clusterId})
	GetCluster(c *gin.Context, clusterId string)
	// List all kubernetes namespaces
	// (GET /clusters/{clusterId}/namespaces)
	ListNamespaces(c *gin.Context, clusterId string)
	// Create k8s namespace
	// (POST /clusters/{clusterId}/namespaces)
	CreateNamespace(c *gin.Context, clusterId string)
	// Update k8s namespace
	// (PUT /clusters/{clusterId}/namespaces)
	UpdateNamespace(c *gin.Context, clusterId string)
	// Delete k8s namespace by name
	// (DELETE /clusters/{clusterId}/namespaces/{namespace})
	DeleteNamespace(c *gin.Context, clusterId string, namespace string)
	// Get a kubernetes namespace by name
	// (GET /clusters/{clusterId}/namespaces/{namespace})
	GetNamespace(c *gin.Context, clusterId string, namespace string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListClusters operation middleware
func (siw *ServerInterfaceWrapper) ListClusters(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListClusters(c)
}

// GetCluster operation middleware
func (siw *ServerInterfaceWrapper) GetCluster(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCluster(c, clusterId)
}

// ListNamespaces operation middleware
func (siw *ServerInterfaceWrapper) ListNamespaces(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListNamespaces(c, clusterId)
}

// CreateNamespace operation middleware
func (siw *ServerInterfaceWrapper) CreateNamespace(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNamespace(c, clusterId)
}

// UpdateNamespace operation middleware
func (siw *ServerInterfaceWrapper) UpdateNamespace(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNamespace(c, clusterId)
}

// DeleteNamespace operation middleware
func (siw *ServerInterfaceWrapper) DeleteNamespace(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNamespace(c, clusterId, namespace)
}

// GetNamespace operation middleware
func (siw *ServerInterfaceWrapper) GetNamespace(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNamespace(c, clusterId, namespace)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/clusters", wrapper.ListClusters)
	router.GET(options.BaseURL+"/clusters/:clusterId", wrapper.GetCluster)
	router.GET(options.BaseURL+"/clusters/:clusterId/namespaces", wrapper.ListNamespaces)
	router.POST(options.BaseURL+"/clusters/:clusterId/namespaces", wrapper.CreateNamespace)
	router.PUT(options.BaseURL+"/clusters/:clusterId/namespaces", wrapper.UpdateNamespace)
	router.DELETE(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace", wrapper.DeleteNamespace)
	router.GET(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace", wrapper.GetNamespace)
}
