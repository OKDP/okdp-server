// Package _projects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _projects

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CreateProjectJSONBodyStatus.
const (
	CreateProjectJSONBodyStatusActive      CreateProjectJSONBodyStatus = "Active"
	CreateProjectJSONBodyStatusTerminating CreateProjectJSONBodyStatus = "Terminating"
)

// Defines values for UpdateProjectJSONBodyStatus.
const (
	UpdateProjectJSONBodyStatusActive      UpdateProjectJSONBodyStatus = "Active"
	UpdateProjectJSONBodyStatusTerminating UpdateProjectJSONBodyStatus = "Terminating"
)

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody struct {
	CreationTimestamp *time.Time                   `json:"creationTimestamp,omitempty"`
	Description       *string                      `json:"description,omitempty"`
	DisplayName       *string                      `json:"displayName,omitempty"`
	Environment       *string                      `json:"environment,omitempty"`
	Name              string                       `json:"name"`
	Status            *CreateProjectJSONBodyStatus `json:"status,omitempty"`
}

// CreateProjectJSONBodyStatus defines parameters for CreateProject.
type CreateProjectJSONBodyStatus string

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody struct {
	CreationTimestamp *time.Time                   `json:"creationTimestamp,omitempty"`
	Description       *string                      `json:"description,omitempty"`
	DisplayName       *string                      `json:"displayName,omitempty"`
	Environment       *string                      `json:"environment,omitempty"`
	Name              string                       `json:"name"`
	Status            *UpdateProjectJSONBodyStatus `json:"status,omitempty"`
}

// UpdateProjectJSONBodyStatus defines parameters for UpdateProject.
type UpdateProjectJSONBodyStatus string

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all projects
	// (GET /clusters/{clusterId}/projects)
	ListProjects(c *gin.Context, clusterId string)
	// Create OKDP project
	// (POST /clusters/{clusterId}/projects)
	CreateProject(c *gin.Context, clusterId string)
	// Update an existing OKDP project
	// (PUT /clusters/{clusterId}/projects)
	UpdateProject(c *gin.Context, clusterId string)
	// Delete an existing OKDP project
	// (DELETE /clusters/{clusterId}/projects/{projectName})
	DeleteProject(c *gin.Context, clusterId string, projectName string)
	// Get a project by name
	// (GET /clusters/{clusterId}/projects/{projectName})
	GetProject(c *gin.Context, clusterId string, projectName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProjects(c, clusterId)
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProject(c, clusterId)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProject(c, clusterId)
}

// DeleteProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithOptions("simple", "projectName", c.Param("projectName"), &projectName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteProject(c, clusterId, projectName)
}

// GetProject operation middleware
func (siw *ServerInterfaceWrapper) GetProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "projectName" -------------
	var projectName string

	err = runtime.BindStyledParameterWithOptions("simple", "projectName", c.Param("projectName"), &projectName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProject(c, clusterId, projectName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/clusters/:clusterId/projects", wrapper.ListProjects)
	router.POST(options.BaseURL+"/clusters/:clusterId/projects", wrapper.CreateProject)
	router.PUT(options.BaseURL+"/clusters/:clusterId/projects", wrapper.UpdateProject)
	router.DELETE(options.BaseURL+"/clusters/:clusterId/projects/:projectName", wrapper.DeleteProject)
	router.GET(options.BaseURL+"/clusters/:clusterId/projects/:projectName", wrapper.GetProject)
}
