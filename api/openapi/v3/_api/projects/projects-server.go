// Package _projects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _projects

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	Oauth2Scopes    = "oauth2.Scopes"
)

// CreateProjectsJSONBody defines parameters for CreateProjects.
type CreateProjectsJSONBody struct {
	ToDo1 string `json:"ToDo1"`
	ToDo2 string `json:"toDo2"`
	ToDo3 string `json:"toDo3"`
	ToDo4 string `json:"toDo4"`
}

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody struct {
	ToDo1 string `json:"ToDo1"`
	ToDo2 string `json:"toDo2"`
	ToDo3 string `json:"toDo3"`
	ToDo4 string `json:"toDo4"`
}

// CreateProjectsJSONRequestBody defines body for CreateProjects for application/json ContentType.
type CreateProjectsJSONRequestBody CreateProjectsJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all projects
	// (GET /spaces/{spaceId}/projects)
	ListProjects(c *gin.Context, spaceId string)
	// Create a new project
	// (POST /spaces/{spaceId}/projects)
	CreateProjects(c *gin.Context, spaceId string)
	// Delete a project
	// (DELETE /spaces/{spaceId}/projects/{projectId})
	DeletProject(c *gin.Context, spaceId string, projectId string)
	// Get a project by projectId
	// (GET /spaces/{spaceId}/projects/{projectId})
	GetProjects(c *gin.Context, spaceId string, projectId string)
	// Update a project
	// (PUT /spaces/{spaceId}/projects/{projectId})
	UpdateProject(c *gin.Context, spaceId string, projectId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListProjects operation middleware
func (siw *ServerInterfaceWrapper) ListProjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListProjects(c, spaceId)
}

// CreateProjects operation middleware
func (siw *ServerInterfaceWrapper) CreateProjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProjects(c, spaceId)
}

// DeletProject operation middleware
func (siw *ServerInterfaceWrapper) DeletProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletProject(c, spaceId, projectId)
}

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProjects(c, spaceId, projectId)
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "projectId" -------------
	var projectId string

	err = runtime.BindStyledParameterWithOptions("simple", "projectId", c.Param("projectId"), &projectId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter projectId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateProject(c, spaceId, projectId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/spaces/:spaceId/projects", wrapper.ListProjects)
	router.POST(options.BaseURL+"/spaces/:spaceId/projects", wrapper.CreateProjects)
	router.DELETE(options.BaseURL+"/spaces/:spaceId/projects/:projectId", wrapper.DeletProject)
	router.GET(options.BaseURL+"/spaces/:spaceId/projects/:projectId", wrapper.GetProjects)
	router.PUT(options.BaseURL+"/spaces/:spaceId/projects/:projectId", wrapper.UpdateProject)
}
