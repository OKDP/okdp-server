// Package _k8s provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _k8s

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CreateK8sReleaseJSONBodySpecPackageProvider.
const (
	CreateK8sReleaseJSONBodySpecPackageProviderAws     CreateK8sReleaseJSONBodySpecPackageProvider = "aws"
	CreateK8sReleaseJSONBodySpecPackageProviderAzure   CreateK8sReleaseJSONBodySpecPackageProvider = "azure"
	CreateK8sReleaseJSONBodySpecPackageProviderGcp     CreateK8sReleaseJSONBodySpecPackageProvider = "gcp"
	CreateK8sReleaseJSONBodySpecPackageProviderGeneric CreateK8sReleaseJSONBodySpecPackageProvider = "generic"
)

// Defines values for CreateK8sReleaseJSONBodySpecPackageVerifyProvider.
const (
	CreateK8sReleaseJSONBodySpecPackageVerifyProviderCosign   CreateK8sReleaseJSONBodySpecPackageVerifyProvider = "cosign"
	CreateK8sReleaseJSONBodySpecPackageVerifyProviderNotation CreateK8sReleaseJSONBodySpecPackageVerifyProvider = "notation"
)

// Defines values for UpdateK8sReleaseJSONBodySpecPackageProvider.
const (
	UpdateK8sReleaseJSONBodySpecPackageProviderAws     UpdateK8sReleaseJSONBodySpecPackageProvider = "aws"
	UpdateK8sReleaseJSONBodySpecPackageProviderAzure   UpdateK8sReleaseJSONBodySpecPackageProvider = "azure"
	UpdateK8sReleaseJSONBodySpecPackageProviderGcp     UpdateK8sReleaseJSONBodySpecPackageProvider = "gcp"
	UpdateK8sReleaseJSONBodySpecPackageProviderGeneric UpdateK8sReleaseJSONBodySpecPackageProvider = "generic"
)

// Defines values for UpdateK8sReleaseJSONBodySpecPackageVerifyProvider.
const (
	UpdateK8sReleaseJSONBodySpecPackageVerifyProviderCosign   UpdateK8sReleaseJSONBodySpecPackageVerifyProvider = "cosign"
	UpdateK8sReleaseJSONBodySpecPackageVerifyProviderNotation UpdateK8sReleaseJSONBodySpecPackageVerifyProvider = "notation"
)

// CreateK8sReleaseJSONBody defines parameters for CreateK8sRelease.
type CreateK8sReleaseJSONBody struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec *struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *CreateK8sReleaseJSONBodySpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider CreateK8sReleaseJSONBodySpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec,omitempty"`

	// Status Release is the Schema for the releases API.
	Status *struct {
		// Status ReleaseStatus defines the observed state of Release.
		// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
		// (Except for 'context', as controlled by a debug flag)
		Status *struct {
			// Context Context is the resulting context, if requested in debug options
			Context *interface{} `json:"context,omitempty"`

			// Dependencies The result of the package template and release value
			Dependencies []string `json:"dependencies"`

			// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
			HelmReleaseStates *map[string]struct {
				Ready  string  `json:"ready"`
				Status *string `json:"status,omitempty"`
			} `json:"helmReleaseStates,omitempty"`
			MissingDependency string `json:"missingDependency"`

			// Parameters Parameters is the resulting parameters set, if requested in debug options
			Parameters *interface{} `json:"parameters,omitempty"`
			Phase      string       `json:"phase"`

			// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
			// as printcolumn
			PrintContexts *string `json:"printContexts,omitempty"`

			// PrintDescription PrintDescription
			// Copy of the release description, or, if empty the (templated) package one
			PrintDescription *string `json:"printDescription,omitempty"`

			// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
			PrintProtected string `json:"printProtected"`

			// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
			// It is the value checked by the webhook
			Protected bool `json:"protected"`

			// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
			// as printcolumn
			ReadyReleases string `json:"readyReleases"`

			// Roles The result of the package template and release value
			Roles []string `json:"roles"`

			// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
			// Key could 'html', 'text', some language id, etc...
			Usage *map[string]string `json:"usage,omitempty"`
		} `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// CreateK8sReleaseParams defines parameters for CreateK8sRelease.
type CreateK8sReleaseParams struct {
	// DryRun If true, performs a server-side dry run without persisting the resource
	DryRun *bool `form:"dryRun,omitempty" json:"dryRun,omitempty"`
}

// CreateK8sReleaseJSONBodySpecPackageProvider defines parameters for CreateK8sRelease.
type CreateK8sReleaseJSONBodySpecPackageProvider string

// CreateK8sReleaseJSONBodySpecPackageVerifyProvider defines parameters for CreateK8sRelease.
type CreateK8sReleaseJSONBodySpecPackageVerifyProvider string

// UpdateK8sReleaseJSONBody defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseJSONBody struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                 `json:"kind,omitempty"`
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec *struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *UpdateK8sReleaseJSONBodySpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider UpdateK8sReleaseJSONBodySpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec,omitempty"`

	// Status Release is the Schema for the releases API.
	Status *struct {
		// Status ReleaseStatus defines the observed state of Release.
		// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
		// (Except for 'context', as controlled by a debug flag)
		Status *struct {
			// Context Context is the resulting context, if requested in debug options
			Context *interface{} `json:"context,omitempty"`

			// Dependencies The result of the package template and release value
			Dependencies []string `json:"dependencies"`

			// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
			HelmReleaseStates *map[string]struct {
				Ready  string  `json:"ready"`
				Status *string `json:"status,omitempty"`
			} `json:"helmReleaseStates,omitempty"`
			MissingDependency string `json:"missingDependency"`

			// Parameters Parameters is the resulting parameters set, if requested in debug options
			Parameters *interface{} `json:"parameters,omitempty"`
			Phase      string       `json:"phase"`

			// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
			// as printcolumn
			PrintContexts *string `json:"printContexts,omitempty"`

			// PrintDescription PrintDescription
			// Copy of the release description, or, if empty the (templated) package one
			PrintDescription *string `json:"printDescription,omitempty"`

			// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
			PrintProtected string `json:"printProtected"`

			// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
			// It is the value checked by the webhook
			Protected bool `json:"protected"`

			// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
			// as printcolumn
			ReadyReleases string `json:"readyReleases"`

			// Roles The result of the package template and release value
			Roles []string `json:"roles"`

			// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
			// Key could 'html', 'text', some language id, etc...
			Usage *map[string]string `json:"usage,omitempty"`
		} `json:"status,omitempty"`
	} `json:"status,omitempty"`
}

// UpdateK8sReleaseParams defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseParams struct {
	// DryRun If true, performs a server-side dry run without persisting the resource
	DryRun *bool `form:"dryRun,omitempty" json:"dryRun,omitempty"`
}

// UpdateK8sReleaseJSONBodySpecPackageProvider defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseJSONBodySpecPackageProvider string

// UpdateK8sReleaseJSONBodySpecPackageVerifyProvider defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseJSONBodySpecPackageVerifyProvider string

// CreateK8sReleaseJSONRequestBody defines body for CreateK8sRelease for application/json ContentType.
type CreateK8sReleaseJSONRequestBody CreateK8sReleaseJSONBody

// UpdateK8sReleaseJSONRequestBody defines body for UpdateK8sRelease for application/json ContentType.
type UpdateK8sReleaseJSONRequestBody UpdateK8sReleaseJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the list of the deployed releases
	// (GET /clusters/{clusterId}/namespaces/{namespace}/releases)
	ListK8sReleases(c *gin.Context, clusterId string, namespace string)
	// Create KuboCD release in Kubernetes
	// (POST /clusters/{clusterId}/namespaces/{namespace}/releases)
	CreateK8sRelease(c *gin.Context, clusterId string, namespace string, params CreateK8sReleaseParams)
	// Update KuboCD release in Kubernetes
	// (PUT /clusters/{clusterId}/namespaces/{namespace}/releases)
	UpdateK8sRelease(c *gin.Context, clusterId string, namespace string, params UpdateK8sReleaseParams)
	// Delete the KuboCD release in kubernetes
	// (DELETE /clusters/{clusterId}/namespaces/{namespace}/releases/{releaseName})
	DeleteK8sRelease(c *gin.Context, clusterId string, namespace string, releaseName string)
	// Get the deployed release by name
	// (GET /clusters/{clusterId}/namespaces/{namespace}/releases/{releaseName})
	GetK8sRelease(c *gin.Context, clusterId string, namespace string, releaseName string)
	// Get the release status
	// (GET /clusters/{clusterId}/namespaces/{namespace}/releases/{releaseName}/status)
	GetK8sReleaseStatus(c *gin.Context, clusterId string, namespace string, releaseName string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListK8sReleases operation middleware
func (siw *ServerInterfaceWrapper) ListK8sReleases(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListK8sReleases(c, clusterId, namespace)
}

// CreateK8sRelease operation middleware
func (siw *ServerInterfaceWrapper) CreateK8sRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateK8sReleaseParams

	// ------------- Optional query parameter "dryRun" -------------

	err = runtime.BindQueryParameter("form", true, false, "dryRun", c.Request.URL.Query(), &params.DryRun)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dryRun: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateK8sRelease(c, clusterId, namespace, params)
}

// UpdateK8sRelease operation middleware
func (siw *ServerInterfaceWrapper) UpdateK8sRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateK8sReleaseParams

	// ------------- Optional query parameter "dryRun" -------------

	err = runtime.BindQueryParameter("form", true, false, "dryRun", c.Request.URL.Query(), &params.DryRun)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter dryRun: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateK8sRelease(c, clusterId, namespace, params)
}

// DeleteK8sRelease operation middleware
func (siw *ServerInterfaceWrapper) DeleteK8sRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "releaseName" -------------
	var releaseName string

	err = runtime.BindStyledParameterWithOptions("simple", "releaseName", c.Param("releaseName"), &releaseName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteK8sRelease(c, clusterId, namespace, releaseName)
}

// GetK8sRelease operation middleware
func (siw *ServerInterfaceWrapper) GetK8sRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "releaseName" -------------
	var releaseName string

	err = runtime.BindStyledParameterWithOptions("simple", "releaseName", c.Param("releaseName"), &releaseName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetK8sRelease(c, clusterId, namespace, releaseName)
}

// GetK8sReleaseStatus operation middleware
func (siw *ServerInterfaceWrapper) GetK8sReleaseStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "clusterId" -------------
	var clusterId string

	err = runtime.BindStyledParameterWithOptions("simple", "clusterId", c.Param("clusterId"), &clusterId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clusterId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "namespace" -------------
	var namespace string

	err = runtime.BindStyledParameterWithOptions("simple", "namespace", c.Param("namespace"), &namespace, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter namespace: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "releaseName" -------------
	var releaseName string

	err = runtime.BindStyledParameterWithOptions("simple", "releaseName", c.Param("releaseName"), &releaseName, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter releaseName: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetK8sReleaseStatus(c, clusterId, namespace, releaseName)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace/releases", wrapper.ListK8sReleases)
	router.POST(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace/releases", wrapper.CreateK8sRelease)
	router.PUT(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace/releases", wrapper.UpdateK8sRelease)
	router.DELETE(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace/releases/:releaseName", wrapper.DeleteK8sRelease)
	router.GET(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace/releases/:releaseName", wrapper.GetK8sRelease)
	router.GET(options.BaseURL+"/clusters/:clusterId/namespaces/:namespace/releases/:releaseName/status", wrapper.GetK8sReleaseStatus)
}
