// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	Oauth2Scopes    = "oauth2.Scopes"
)

// Catalog defines model for Catalog.
type Catalog struct {
	Components []string `json:"components"`
	Name       string   `json:"name"`
	Templates  []string `json:"templates"`
}

// Component defines model for Component.
type Component struct {
	Kind string `json:"kind"`
	Spec struct {
		AllowCreateNamespace bool     `json:"allowCreateNamespace"`
		AllowValues          bool     `json:"allowValues"`
		Catalogs             []string `json:"catalogs"`
		Config               struct {
			Install struct {
				CreateNamespace bool `json:"createNamespace"`
				Remediation     struct {
					RemediateLastFailure bool    `json:"remediateLastFailure"`
					Retries              float32 `json:"retries"`
				} `json:"remediation"`
			} `json:"install"`
			Timeout string `json:"timeout"`
			Upgrade struct {
				Remediation struct {
					RemediateLastFailure bool    `json:"remediateLastFailure"`
					Retries              float32 `json:"retries"`
				} `json:"remediation"`
			} `json:"upgrade"`
		} `json:"config"`
		ContextSchema struct {
			File string `json:"File"`
			Json string `json:"Json"`
		} `json:"contextSchema"`
		DependsOn []string `json:"dependsOn"`
		Name      string   `json:"name"`

		// Parameters List of paramters as key/value pairs
		Parameters       map[string]interface{} `json:"parameters"`
		ParametersSchema struct {
			File string `json:"File"`
			Json string `json:"Json"`
		} `json:"parametersSchema"`
		Protected bool     `json:"protected"`
		Roles     []string `json:"roles"`
		Source    struct {
			AllowedVersions []string `json:"allowedVersions"`
			DefaultVersion  string   `json:"defaultVersion"`
			GitRepository   struct {
				Name      string `json:"name"`
				Namespace string `json:"namespace"`
				Path      string `json:"path"`
				Unmanaged bool   `json:"unmanaged"`
			} `json:"gitRepository"`
			HelmRepository struct {
				CertSecretRef string `json:"certSecretRef"`
				Chart         string `json:"chart"`
				Interval      string `json:"interval"`
				SecretRef     string `json:"secretRef"`
				Url           string `json:"url"`
			} `json:"helmRepository"`
			OciRepository struct {
				CertSecretRef string `json:"certSecretRef"`
				Insecure      bool   `json:"insecure"`
				Interval      string `json:"interval"`
				SecretRef     string `json:"secretRef"`
				Url           string `json:"url"`
			} `json:"ociRepository"`
		} `json:"source"`
		Suspended bool                  `json:"suspended"`
		Usage     Component_Spec_Usage  `json:"usage"`
		Values    Component_Spec_Values `json:"values"`
		Version   string                `json:"version"`
	} `json:"spec"`
	Status struct {
		Error            string                 `json:"error"`
		File             string                 `json:"file"`
		ParametersSchema map[string]interface{} `json:"parametersSchema"`
		Path             string                 `json:"path"`
		Releases         []string               `json:"releases"`
		Title            string                 `json:"title"`
	} `json:"status"`
}

// ComponentSpecUsage0 defines model for .
type ComponentSpecUsage0 = string

// ComponentSpecUsage1 defines model for .
type ComponentSpecUsage1 map[string]interface{}

// Component_Spec_Usage defines model for Component.Spec.Usage.
type Component_Spec_Usage struct {
	union json.RawMessage
}

// ComponentSpecValues0 defines model for .
type ComponentSpecValues0 = string

// ComponentSpecValues1 defines model for .
type ComponentSpecValues1 map[string]interface{}

// Component_Spec_Values defines model for Component.Spec.Values.
type Component_Spec_Values struct {
	union json.RawMessage
}

// ComponentReleasePayload defines model for ComponentReleasePayload.
type ComponentReleasePayload struct {
	Component struct {
		// Config Additional configuration
		Config         *map[string]interface{} `json:"config,omitempty"`
		Name           string                  `json:"name"`
		ParameterFiles *[]struct {
			Document *string `json:"document,omitempty"`
			File     *string `json:"file,omitempty"`
			Unwrap   *string `json:"unwrap,omitempty"`
			Wrap     *string `json:"wrap,omitempty"`
		} `json:"parameterFiles,omitempty"`

		// Parameters List of paramters as key/value pairs
		Parameters *map[string]interface{} `json:"parameters,omitempty"`
		Protected  *bool                   `json:"protected,omitempty"`
		Source     *struct {
			Version string `json:"version"`
		} `json:"source,omitempty"`
		Suspended *bool `json:"suspended,omitempty"`

		// Values List of values as key/value pairs
		Values  *map[string]interface{} `json:"values,omitempty"`
		Version string                  `json:"version"`
	} `json:"component"`
	DependsOn *[]string `json:"dependsOn,omitempty"`
	Enabled   *bool     `json:"enabled,omitempty"`
	Name      string    `json:"name"`
	Namespace *string   `json:"namespace,omitempty"`
	Roles     *[]string `json:"roles,omitempty"`
}

// ComponentReleaseRequest defines model for ComponentReleaseRequest.
type ComponentReleaseRequest struct {
	Comment           string `json:"comment"`
	ComponentReleases []struct {
		Component struct {
			// Config Additional configuration
			Config         *map[string]interface{} `json:"config,omitempty"`
			Name           string                  `json:"name"`
			ParameterFiles *[]struct {
				Document *string `json:"document,omitempty"`
				File     *string `json:"file,omitempty"`
				Unwrap   *string `json:"unwrap,omitempty"`
				Wrap     *string `json:"wrap,omitempty"`
			} `json:"parameterFiles,omitempty"`

			// Parameters List of paramters as key/value pairs
			Parameters *map[string]interface{} `json:"parameters,omitempty"`
			Protected  *bool                   `json:"protected,omitempty"`
			Source     *struct {
				Version string `json:"version"`
			} `json:"source,omitempty"`
			Suspended *bool `json:"suspended,omitempty"`

			// Values List of values as key/value pairs
			Values  *map[string]interface{} `json:"values,omitempty"`
			Version string                  `json:"version"`
		} `json:"component"`
		DependsOn *[]string `json:"dependsOn,omitempty"`
		Enabled   *bool     `json:"enabled,omitempty"`
		Name      string    `json:"name"`
		Namespace *string   `json:"namespace,omitempty"`
		Roles     *[]string `json:"roles,omitempty"`
	} `json:"componentReleases"`
	GitRepoFolder string `json:"gitRepoFolder"`
}

// ComponentReleaseResponse defines model for ComponentReleaseResponse.
type ComponentReleaseResponse struct {
	Kind string `json:"kind"`
	Spec struct {
		Component struct {
			Ref struct {
				Name    string `json:"Name"`
				Version string `json:"Version"`
			} `json:"Ref"`
			Source struct {
				Version string `json:"version"`
			} `json:"Source"`

			// Config Additional configuration
			Config         map[string]interface{} `json:"config"`
			ParameterFiles []struct {
				Document *string `json:"Document,omitempty"`
				File     *string `json:"File,omitempty"`
				Unwrap   *string `json:"Unwrap,omitempty"`
				Wrap     *string `json:"Wrap,omitempty"`
			} `json:"parameterFiles"`

			// Parameters List of paramters as key/value pairs
			Parameters map[string]interface{} `json:"parameters"`
			Protected  bool                   `json:"protected"`
			Suspended  bool                   `json:"suspended"`

			// Values List of values as key/value pairs
			Values map[string]interface{} `json:"values"`
		} `json:"component"`
		DependsOn       []string `json:"dependsOn"`
		Enabled         bool     `json:"enabled"`
		HelmReleaseName string   `json:"helmReleaseName__"`
		Name            string   `json:"name"`
		Namespace       string   `json:"namespace"`
		Roles           []string `json:"roles"`
	} `json:"spec"`
	Status struct {
		Catalogs     []string `json:"catalogs"`
		Dependencies []string `json:"dependencies"`
		Error        string   `json:"error"`
		File         string   `json:"file"`

		// Parameters List of values as key/value pairs
		Parameters map[string]interface{} `json:"parameters"`
		Path       string                 `json:"path"`
		Usage      string                 `json:"usage"`
	} `json:"status"`
}

// FlatComponent defines model for FlatComponent.
type FlatComponent struct {
	Catalogs             []string `json:"catalogs"`
	ComponentName        string   `json:"componentName"`
	ComponentReleaseName string   `json:"componentReleaseName"`
	ComponentVersion     string   `json:"componentVersion"`
	Enabled              bool     `json:"enabled"`
	PackageName          string   `json:"packageName"`
	PackageVersion       string   `json:"packageVersion"`
	Protected            bool     `json:"protected"`
	Suspended            bool     `json:"suspended"`
	TemplateName         string   `json:"templateName"`
	TemplateReleaseName  string   `json:"templateReleaseName"`
	TemplateVersion      string   `json:"templateVersion"`
	Usage                string   `json:"usage"`
}

// GitCommit defines model for GitCommit.
type GitCommit struct {
	// Commit The hash of the commit
	Commit *string `json:"commit,omitempty"`

	// CommitMessage A commit Message
	CommitMessage *string `json:"commitMessage,omitempty"`

	// CommitterEmail Email of the committer
	CommitterEmail *string `json:"committerEmail,omitempty"`

	// CommitterName Name of the committer
	CommitterName *string `json:"committerName,omitempty"`

	// Force Whether to force commit
	Force *bool `json:"force,omitempty"`

	// TargetPath Target file path of the commit in the git repository
	TargetPath *string `json:"targetPath,omitempty"`
}

// KadInstance defines model for KadInstance.
type KadInstance struct {
	APIURL             string `json:"apiUrl"`
	AuthBearer         string `json:"authBearer"`
	ID                 string `json:"id"`
	InsecureSkipVerify bool   `json:"insecureSkipVerify"`
	Name               string `json:"name"`
}

// ServerError defines model for ServerError.
type ServerError struct {
	Message string `json:"message"`
	Status  int    `json:"status"`
	Type    string `json:"type"`
}

// Service defines model for Service.
type Service struct {
	Name           string `json:"name"`
	IsComposition  bool   `json:"isComposition"`
	FlatComponents []struct {
		Catalogs             []string `json:"catalogs"`
		ComponentName        string   `json:"componentName"`
		ComponentReleaseName string   `json:"componentReleaseName"`
		ComponentVersion     string   `json:"componentVersion"`
		Enabled              bool     `json:"enabled"`
		PackageName          string   `json:"packageName"`
		PackageVersion       string   `json:"packageVersion"`
		Protected            bool     `json:"protected"`
		Suspended            bool     `json:"suspended"`
		TemplateName         string   `json:"templateName"`
		TemplateReleaseName  string   `json:"templateReleaseName"`
		TemplateVersion      string   `json:"templateVersion"`
		Usage                string   `json:"usage"`
	} `json:"flatComponents"`
}

// TemplateRelease defines model for TemplateRelease.
type TemplateRelease struct {
	Kind string `json:"kind"`
	Spec struct {
		Enabled  bool   `json:"enabled"`
		Name     string `json:"name"`
		Template struct {
			Ref struct {
				Name    string `json:"Name"`
				Version string `json:"Version"`
			} `json:"Ref"`

			// Parameters List of paramters as key/value pairs
			Parameters map[string]interface{} `json:"parameters"`
		} `json:"template"`
	} `json:"spec"`
	Status struct {
		Catalogs []string `json:"catalogs"`
		Children []string `json:"children"`
		Error    string   `json:"error"`
		File     string   `json:"file"`

		// Parameters List of paramters as key/value pairs
		Parameters map[string]interface{} `json:"parameters"`
		Path       string                 `json:"path"`
		Usage      string                 `json:"usage"`
	} `json:"status"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Email   string   `json:"email"`
	Groups  []string `json:"groups"`
	Login   string   `json:"login"`
	Name    string   `json:"name"`
	Roles   []string `json:"roles"`
	Subject string   `json:"sub"`
}

// ListComponentReleasesParams defines parameters for ListComponentReleases.
type ListComponentReleasesParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// GetComponentReleaseParams defines parameters for GetComponentRelease.
type GetComponentReleaseParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// CreateOrUpdateComponentReleaseJSONBody defines parameters for CreateOrUpdateComponentRelease.
type CreateOrUpdateComponentReleaseJSONBody struct {
	Comment           string `json:"comment"`
	ComponentReleases []struct {
		Component struct {
			// Config Additional configuration
			Config         *map[string]interface{} `json:"config,omitempty"`
			Name           string                  `json:"name"`
			ParameterFiles *[]struct {
				Document *string `json:"document,omitempty"`
				File     *string `json:"file,omitempty"`
				Unwrap   *string `json:"unwrap,omitempty"`
				Wrap     *string `json:"wrap,omitempty"`
			} `json:"parameterFiles,omitempty"`

			// Parameters List of paramters as key/value pairs
			Parameters *map[string]interface{} `json:"parameters,omitempty"`
			Protected  *bool                   `json:"protected,omitempty"`
			Source     *struct {
				Version string `json:"version"`
			} `json:"source,omitempty"`
			Suspended *bool `json:"suspended,omitempty"`

			// Values List of values as key/value pairs
			Values  *map[string]interface{} `json:"values,omitempty"`
			Version string                  `json:"version"`
		} `json:"component"`
		DependsOn *[]string `json:"dependsOn,omitempty"`
		Enabled   *bool     `json:"enabled,omitempty"`
		Name      string    `json:"name"`
		Namespace *string   `json:"namespace,omitempty"`
		Roles     *[]string `json:"roles,omitempty"`
	} `json:"componentReleases"`
	GitRepoFolder string `json:"gitRepoFolder"`
}

// ListComponentsParams defines parameters for ListComponents.
type ListComponentsParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// GetComponentParams defines parameters for GetComponent.
type GetComponentParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// ListTemplateReleasesParams defines parameters for ListTemplateReleases.
type ListTemplateReleasesParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// GetTemplateReleaseParams defines parameters for GetTemplateRelease.
type GetTemplateReleaseParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// CreateOrUpdateComponentReleaseJSONRequestBody defines body for CreateOrUpdateComponentRelease for application/json ContentType.
type CreateOrUpdateComponentReleaseJSONRequestBody CreateOrUpdateComponentReleaseJSONBody

// AsComponentSpecUsage0 returns the union data inside the Component_Spec_Usage as a ComponentSpecUsage0
func (t Component_Spec_Usage) AsComponentSpecUsage0() (ComponentSpecUsage0, error) {
	var body ComponentSpecUsage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComponentSpecUsage0 overwrites any union data inside the Component_Spec_Usage as the provided ComponentSpecUsage0
func (t *Component_Spec_Usage) FromComponentSpecUsage0(v ComponentSpecUsage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComponentSpecUsage0 performs a merge with any union data inside the Component_Spec_Usage, using the provided ComponentSpecUsage0
func (t *Component_Spec_Usage) MergeComponentSpecUsage0(v ComponentSpecUsage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComponentSpecUsage1 returns the union data inside the Component_Spec_Usage as a ComponentSpecUsage1
func (t Component_Spec_Usage) AsComponentSpecUsage1() (ComponentSpecUsage1, error) {
	var body ComponentSpecUsage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComponentSpecUsage1 overwrites any union data inside the Component_Spec_Usage as the provided ComponentSpecUsage1
func (t *Component_Spec_Usage) FromComponentSpecUsage1(v ComponentSpecUsage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComponentSpecUsage1 performs a merge with any union data inside the Component_Spec_Usage, using the provided ComponentSpecUsage1
func (t *Component_Spec_Usage) MergeComponentSpecUsage1(v ComponentSpecUsage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Component_Spec_Usage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Component_Spec_Usage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsComponentSpecValues0 returns the union data inside the Component_Spec_Values as a ComponentSpecValues0
func (t Component_Spec_Values) AsComponentSpecValues0() (ComponentSpecValues0, error) {
	var body ComponentSpecValues0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComponentSpecValues0 overwrites any union data inside the Component_Spec_Values as the provided ComponentSpecValues0
func (t *Component_Spec_Values) FromComponentSpecValues0(v ComponentSpecValues0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComponentSpecValues0 performs a merge with any union data inside the Component_Spec_Values, using the provided ComponentSpecValues0
func (t *Component_Spec_Values) MergeComponentSpecValues0(v ComponentSpecValues0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsComponentSpecValues1 returns the union data inside the Component_Spec_Values as a ComponentSpecValues1
func (t Component_Spec_Values) AsComponentSpecValues1() (ComponentSpecValues1, error) {
	var body ComponentSpecValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromComponentSpecValues1 overwrites any union data inside the Component_Spec_Values as the provided ComponentSpecValues1
func (t *Component_Spec_Values) FromComponentSpecValues1(v ComponentSpecValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeComponentSpecValues1 performs a merge with any union data inside the Component_Spec_Values, using the provided ComponentSpecValues1
func (t *Component_Spec_Values) MergeComponentSpecValues1(v ComponentSpecValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Component_Spec_Values) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Component_Spec_Values) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
