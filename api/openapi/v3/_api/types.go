// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ReleaseSpecPackageProvider.
const (
	ReleaseSpecPackageProviderAws     ReleaseSpecPackageProvider = "aws"
	ReleaseSpecPackageProviderAzure   ReleaseSpecPackageProvider = "azure"
	ReleaseSpecPackageProviderGcp     ReleaseSpecPackageProvider = "gcp"
	ReleaseSpecPackageProviderGeneric ReleaseSpecPackageProvider = "generic"
)

// Defines values for ReleaseSpecPackageVerifyProvider.
const (
	ReleaseSpecPackageVerifyProviderCosign   ReleaseSpecPackageVerifyProvider = "cosign"
	ReleaseSpecPackageVerifyProviderNotation ReleaseSpecPackageVerifyProvider = "notation"
)

// Defines values for ServerResponseType.
const (
	GitRepo    ServerResponseType = "git_repo"
	K8sCluster ServerResponseType = "k8s_cluster"
	OkdpServer ServerResponseType = "okdp_server"
	Registry   ServerResponseType = "registry"
)

// Defines values for CreateGitReleaseJSONBodySpecPackageProvider.
const (
	CreateGitReleaseJSONBodySpecPackageProviderAws     CreateGitReleaseJSONBodySpecPackageProvider = "aws"
	CreateGitReleaseJSONBodySpecPackageProviderAzure   CreateGitReleaseJSONBodySpecPackageProvider = "azure"
	CreateGitReleaseJSONBodySpecPackageProviderGcp     CreateGitReleaseJSONBodySpecPackageProvider = "gcp"
	CreateGitReleaseJSONBodySpecPackageProviderGeneric CreateGitReleaseJSONBodySpecPackageProvider = "generic"
)

// Defines values for CreateGitReleaseJSONBodySpecPackageVerifyProvider.
const (
	CreateGitReleaseJSONBodySpecPackageVerifyProviderCosign   CreateGitReleaseJSONBodySpecPackageVerifyProvider = "cosign"
	CreateGitReleaseJSONBodySpecPackageVerifyProviderNotation CreateGitReleaseJSONBodySpecPackageVerifyProvider = "notation"
)

// Defines values for UpdateGitReleaseJSONBodySpecPackageProvider.
const (
	UpdateGitReleaseJSONBodySpecPackageProviderAws     UpdateGitReleaseJSONBodySpecPackageProvider = "aws"
	UpdateGitReleaseJSONBodySpecPackageProviderAzure   UpdateGitReleaseJSONBodySpecPackageProvider = "azure"
	UpdateGitReleaseJSONBodySpecPackageProviderGcp     UpdateGitReleaseJSONBodySpecPackageProvider = "gcp"
	UpdateGitReleaseJSONBodySpecPackageProviderGeneric UpdateGitReleaseJSONBodySpecPackageProvider = "generic"
)

// Defines values for UpdateGitReleaseJSONBodySpecPackageVerifyProvider.
const (
	UpdateGitReleaseJSONBodySpecPackageVerifyProviderCosign   UpdateGitReleaseJSONBodySpecPackageVerifyProvider = "cosign"
	UpdateGitReleaseJSONBodySpecPackageVerifyProviderNotation UpdateGitReleaseJSONBodySpecPackageVerifyProvider = "notation"
)

// Defines values for CreateK8sReleaseJSONBodySpecPackageProvider.
const (
	CreateK8sReleaseJSONBodySpecPackageProviderAws     CreateK8sReleaseJSONBodySpecPackageProvider = "aws"
	CreateK8sReleaseJSONBodySpecPackageProviderAzure   CreateK8sReleaseJSONBodySpecPackageProvider = "azure"
	CreateK8sReleaseJSONBodySpecPackageProviderGcp     CreateK8sReleaseJSONBodySpecPackageProvider = "gcp"
	CreateK8sReleaseJSONBodySpecPackageProviderGeneric CreateK8sReleaseJSONBodySpecPackageProvider = "generic"
)

// Defines values for CreateK8sReleaseJSONBodySpecPackageVerifyProvider.
const (
	CreateK8sReleaseJSONBodySpecPackageVerifyProviderCosign   CreateK8sReleaseJSONBodySpecPackageVerifyProvider = "cosign"
	CreateK8sReleaseJSONBodySpecPackageVerifyProviderNotation CreateK8sReleaseJSONBodySpecPackageVerifyProvider = "notation"
)

// Defines values for UpdateK8sReleaseJSONBodySpecPackageProvider.
const (
	Aws     UpdateK8sReleaseJSONBodySpecPackageProvider = "aws"
	Azure   UpdateK8sReleaseJSONBodySpecPackageProvider = "azure"
	Gcp     UpdateK8sReleaseJSONBodySpecPackageProvider = "gcp"
	Generic UpdateK8sReleaseJSONBodySpecPackageProvider = "generic"
)

// Defines values for UpdateK8sReleaseJSONBodySpecPackageVerifyProvider.
const (
	Cosign   UpdateK8sReleaseJSONBodySpecPackageVerifyProvider = "cosign"
	Notation UpdateK8sReleaseJSONBodySpecPackageVerifyProvider = "notation"
)

// Catalog defines model for Catalog.
type Catalog struct {
	Credentials *struct {
		Dockerconfigjson  *string `json:"dockerconfigjson,omitempty"`
		RobotAccountName  *string `json:"robotAccountName,omitempty"`
		RobotAccountToken *string `json:"robotAccountToken,omitempty"`
	} `json:"credentials,omitempty"`
	Description string `json:"description"`
	ID          string `json:"id"`
	Name        string `json:"name"`
	Packages    []struct {
		Name string `json:"name"`
	} `json:"packages"`
	RepoURL string `json:"repoUrl"`
}

// Cluster defines model for Cluster.
type Cluster struct {
	Auth *Cluster_Auth `json:"auth,omitempty"`
	Env  string        `json:"env"`
	ID   string        `json:"id"`
	Name string        `json:"name"`
}

// ClusterAuth0 defines model for .
type ClusterAuth0 = interface{}

// ClusterAuth1 defines model for .
type ClusterAuth1 = interface{}

// ClusterAuth2 defines model for .
type ClusterAuth2 = interface{}

// ClusterAuth3 defines model for .
type ClusterAuth3 = interface{}

// Cluster_Auth defines model for Cluster.Auth.
type Cluster_Auth struct {
	Bearer *struct {
		APIServer   string `json:"apiServer"`
		BearerToken string `json:"bearerToken"`
	} `json:"bearer,omitempty"`
	Certificate *struct {
		APIServer  string `json:"apiServer"`
		CACert     string `json:"caCert"`
		ClientCert string `json:"clientCert"`
		ClientKey  string `json:"clientKey"`
	} `json:"certificate,omitempty"`
	InCluster  *bool `json:"inCluster,omitempty"`
	Kubeconfig *struct {
		APIServer             string `json:"apiServer"`
		Context               string `json:"context"`
		InsecureSkipTlsVerify bool   `json:"insecureSkipTlsVerify"`
		Path                  string `json:"path"`
	} `json:"kubeconfig,omitempty"`
	union json.RawMessage
}

// GitCommit defines model for GitCommit.
type GitCommit struct {
	// Commit The hash of the commit
	Commit *string `json:"commit,omitempty"`

	// CommitMessage A commit Message
	CommitMessage *string `json:"commitMessage,omitempty"`

	// CommitterEmail Email of the committer
	CommitterEmail *string `json:"committerEmail,omitempty"`

	// CommitterName Name of the committer
	CommitterName *string `json:"committerName,omitempty"`

	// Force Whether to force commit
	Force *bool `json:"force,omitempty"`

	// TargetPath Target file path of the commit in the git repository
	TargetPath *string `json:"targetPath,omitempty"`
}

// GitRepository defines model for GitRepository.
type GitRepository struct {
	Credentials struct {
		SecretRef string `json:"secretRef"`
	} `json:"credentials"`
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Path      string `json:"path"`
	Ref       string `json:"ref"`
	RepoURL   string `json:"repoUrl"`
}

// Package defines model for Package.
type Package struct {
	// Name The name of the package
	Name string `json:"name"`

	// RepoURL The URL of OCR registry
	RepoURL string `json:"repoUrl"`

	// Versions A list of versions for the package
	Versions []string `json:"versions"`
}

// Release Release is the Schema for the releases API.
type Release struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata Standard object metadata.
	Metadata struct {
		// Annotations Arbitrary metadata.
		Annotations *map[string]string `json:"annotations,omitempty"`

		// CreationTimestamp Creation timestamp.
		CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`

		// DeletionGracePeriodSeconds Seconds allowed for graceful termination.
		DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty"`

		// DeletionTimestamp Deletion timestamp.
		DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`

		// Finalizers List of finalizers.
		Finalizers *[]string `json:"finalizers,omitempty"`

		// GenerateName Prefix for generating a unique name.
		GenerateName *string `json:"generateName,omitempty"`

		// Generation Sequence number representing generation of desired state.
		Generation *int64 `json:"generation,omitempty"`

		// Labels Key-value pairs to categorize resources.
		Labels *map[string]string `json:"labels,omitempty"`

		// ManagedFields Managed fields tracking info (complex object).
		ManagedFields *map[string]interface{} `json:"managedFields,omitempty"`

		// Name Name of the resource.
		Name *string `json:"name,omitempty"`

		// Namespace Namespace of the resource.
		Namespace *string `json:"namespace,omitempty"`

		// OwnerReferences References to owning resources.
		OwnerReferences *[]struct {
			ApiVersion *string `json:"apiVersion,omitempty"`
			Kind       *string `json:"kind,omitempty"`
			Name       *string `json:"name,omitempty"`
			Uid        *string `json:"uid,omitempty"`
		} `json:"ownerReferences,omitempty"`

		// ResourceVersion Resource version for concurrency control.
		ResourceVersion *string `json:"resourceVersion,omitempty"`

		// SelfLink Deprecated self-link URL.
		SelfLink *string `json:"selfLink,omitempty"`

		// Uid Unique ID assigned by Kubernetes.
		Uid *string `json:"uid,omitempty"`
	} `json:"metadata"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *ReleaseSpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider ReleaseSpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec"`

	// Status ReleaseStatus defines the observed state of Release.
	// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
	// (Except for 'context', as controlled by a debug flag)
	Status *struct {
		// Context Context is the resulting context, if requested in debug options
		Context *interface{} `json:"context,omitempty"`

		// Dependencies The result of the package template and release value
		Dependencies *[]string `json:"dependencies,omitempty"`

		// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
		HelmReleaseStates *map[string]struct {
			Ready  string  `json:"ready"`
			Status *string `json:"status,omitempty"`
		} `json:"helmReleaseStates,omitempty"`
		MissingDependency *string `json:"missingDependency,omitempty"`

		// Parameters Parameters is the resulting parameters set, if requested in debug options
		Parameters *interface{} `json:"parameters,omitempty"`
		Phase      *string      `json:"phase,omitempty"`

		// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
		// as printcolumn
		PrintContexts *string `json:"printContexts,omitempty"`

		// PrintDescription PrintDescription
		// Copy of the release description, or, if empty the (templated) package one
		PrintDescription *string `json:"printDescription,omitempty"`

		// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
		PrintProtected *string `json:"printProtected,omitempty"`

		// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
		// It is the value checked by the webhook
		Protected *bool `json:"protected,omitempty"`

		// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
		// as printcolumn
		ReadyReleases *string `json:"readyReleases,omitempty"`

		// Roles The result of the package template and release value
		Roles *[]string `json:"roles,omitempty"`

		// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
		// Key could 'html', 'text', some language id, etc...
		Usage *map[string]string `json:"usage,omitempty"`
	} `json:"status,omitempty"`
}

// ReleaseSpecPackageProvider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
// All following fields will be replicated in this object
// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
// When not specified, defaults to 'generic'.
// -kubebuilder:default:=generic
type ReleaseSpecPackageProvider string

// ReleaseSpecPackageVerifyProvider Provider specifies the technology used to sign the OCI Artifact.
type ReleaseSpecPackageVerifyProvider string

// ReleaseInfo defines model for ReleaseInfo.
type ReleaseInfo struct {
	Description *string `json:"description,omitempty"`
	Git         struct {
		Path string `json:"path"`
		URL  string `json:"url"`
	} `json:"git"`
	Name      string  `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	Package   struct {
		Repository string `json:"repository"`
		Tag        string `json:"tag"`
	} `json:"package"`
}

// ReleaseStatus ReleaseStatus defines the observed state of Release.
// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
// (Except for 'context', as controlled by a debug flag)
type ReleaseStatus struct {
	// Context Context is the resulting context, if requested in debug options
	Context *interface{} `json:"context,omitempty"`

	// Dependencies The result of the package template and release value
	Dependencies *[]string `json:"dependencies,omitempty"`

	// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
	HelmReleaseStates *map[string]struct {
		Ready  string  `json:"ready"`
		Status *string `json:"status,omitempty"`
	} `json:"helmReleaseStates,omitempty"`
	MissingDependency *string `json:"missingDependency,omitempty"`

	// Parameters Parameters is the resulting parameters set, if requested in debug options
	Parameters *interface{} `json:"parameters,omitempty"`
	Phase      *string      `json:"phase,omitempty"`

	// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
	// as printcolumn
	PrintContexts *string `json:"printContexts,omitempty"`

	// PrintDescription PrintDescription
	// Copy of the release description, or, if empty the (templated) package one
	PrintDescription *string `json:"printDescription,omitempty"`

	// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
	PrintProtected *string `json:"printProtected,omitempty"`

	// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
	// It is the value checked by the webhook
	Protected *bool `json:"protected,omitempty"`

	// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
	// as printcolumn
	ReadyReleases *string `json:"readyReleases,omitempty"`

	// Roles The result of the package template and release value
	Roles *[]string `json:"roles,omitempty"`

	// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
	// Key could 'html', 'text', some language id, etc...
	Usage *map[string]string `json:"usage,omitempty"`
}

// ServerResponse defines model for ServerResponse.
type ServerResponse struct {
	// Message The response message from the server
	Message string `json:"message"`

	// Status The HTTP status code
	Status int `json:"status"`

	// Type The type of the server response
	Type ServerResponseType `json:"type"`
}

// ServerResponseType The type of the server response
type ServerResponseType string

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Email   string   `json:"email"`
	Groups  []string `json:"groups"`
	Login   string   `json:"login"`
	Name    string   `json:"name"`
	Roles   []string `json:"roles"`
	Subject string   `json:"sub"`
}

// CreateGitReleaseJSONBody defines parameters for CreateGitRelease.
type CreateGitReleaseJSONBody struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata Standard object metadata.
	Metadata struct {
		// Annotations Arbitrary metadata.
		Annotations *map[string]string `json:"annotations,omitempty"`

		// CreationTimestamp Creation timestamp.
		CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`

		// DeletionGracePeriodSeconds Seconds allowed for graceful termination.
		DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty"`

		// DeletionTimestamp Deletion timestamp.
		DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`

		// Finalizers List of finalizers.
		Finalizers *[]string `json:"finalizers,omitempty"`

		// GenerateName Prefix for generating a unique name.
		GenerateName *string `json:"generateName,omitempty"`

		// Generation Sequence number representing generation of desired state.
		Generation *int64 `json:"generation,omitempty"`

		// Labels Key-value pairs to categorize resources.
		Labels *map[string]string `json:"labels,omitempty"`

		// ManagedFields Managed fields tracking info (complex object).
		ManagedFields *map[string]interface{} `json:"managedFields,omitempty"`

		// Name Name of the resource.
		Name *string `json:"name,omitempty"`

		// Namespace Namespace of the resource.
		Namespace *string `json:"namespace,omitempty"`

		// OwnerReferences References to owning resources.
		OwnerReferences *[]struct {
			ApiVersion *string `json:"apiVersion,omitempty"`
			Kind       *string `json:"kind,omitempty"`
			Name       *string `json:"name,omitempty"`
			Uid        *string `json:"uid,omitempty"`
		} `json:"ownerReferences,omitempty"`

		// ResourceVersion Resource version for concurrency control.
		ResourceVersion *string `json:"resourceVersion,omitempty"`

		// SelfLink Deprecated self-link URL.
		SelfLink *string `json:"selfLink,omitempty"`

		// Uid Unique ID assigned by Kubernetes.
		Uid *string `json:"uid,omitempty"`
	} `json:"metadata"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *CreateGitReleaseJSONBodySpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider CreateGitReleaseJSONBodySpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec"`

	// Status ReleaseStatus defines the observed state of Release.
	// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
	// (Except for 'context', as controlled by a debug flag)
	Status *struct {
		// Context Context is the resulting context, if requested in debug options
		Context *interface{} `json:"context,omitempty"`

		// Dependencies The result of the package template and release value
		Dependencies *[]string `json:"dependencies,omitempty"`

		// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
		HelmReleaseStates *map[string]struct {
			Ready  string  `json:"ready"`
			Status *string `json:"status,omitempty"`
		} `json:"helmReleaseStates,omitempty"`
		MissingDependency *string `json:"missingDependency,omitempty"`

		// Parameters Parameters is the resulting parameters set, if requested in debug options
		Parameters *interface{} `json:"parameters,omitempty"`
		Phase      *string      `json:"phase,omitempty"`

		// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
		// as printcolumn
		PrintContexts *string `json:"printContexts,omitempty"`

		// PrintDescription PrintDescription
		// Copy of the release description, or, if empty the (templated) package one
		PrintDescription *string `json:"printDescription,omitempty"`

		// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
		PrintProtected *string `json:"printProtected,omitempty"`

		// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
		// It is the value checked by the webhook
		Protected *bool `json:"protected,omitempty"`

		// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
		// as printcolumn
		ReadyReleases *string `json:"readyReleases,omitempty"`

		// Roles The result of the package template and release value
		Roles *[]string `json:"roles,omitempty"`

		// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
		// Key could 'html', 'text', some language id, etc...
		Usage *map[string]string `json:"usage,omitempty"`
	} `json:"status,omitempty"`
}

// CreateGitReleaseJSONBodySpecPackageProvider defines parameters for CreateGitRelease.
type CreateGitReleaseJSONBodySpecPackageProvider string

// CreateGitReleaseJSONBodySpecPackageVerifyProvider defines parameters for CreateGitRelease.
type CreateGitReleaseJSONBodySpecPackageVerifyProvider string

// UpdateGitReleaseJSONBody defines parameters for UpdateGitRelease.
type UpdateGitReleaseJSONBody struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata Standard object metadata.
	Metadata struct {
		// Annotations Arbitrary metadata.
		Annotations *map[string]string `json:"annotations,omitempty"`

		// CreationTimestamp Creation timestamp.
		CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`

		// DeletionGracePeriodSeconds Seconds allowed for graceful termination.
		DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty"`

		// DeletionTimestamp Deletion timestamp.
		DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`

		// Finalizers List of finalizers.
		Finalizers *[]string `json:"finalizers,omitempty"`

		// GenerateName Prefix for generating a unique name.
		GenerateName *string `json:"generateName,omitempty"`

		// Generation Sequence number representing generation of desired state.
		Generation *int64 `json:"generation,omitempty"`

		// Labels Key-value pairs to categorize resources.
		Labels *map[string]string `json:"labels,omitempty"`

		// ManagedFields Managed fields tracking info (complex object).
		ManagedFields *map[string]interface{} `json:"managedFields,omitempty"`

		// Name Name of the resource.
		Name *string `json:"name,omitempty"`

		// Namespace Namespace of the resource.
		Namespace *string `json:"namespace,omitempty"`

		// OwnerReferences References to owning resources.
		OwnerReferences *[]struct {
			ApiVersion *string `json:"apiVersion,omitempty"`
			Kind       *string `json:"kind,omitempty"`
			Name       *string `json:"name,omitempty"`
			Uid        *string `json:"uid,omitempty"`
		} `json:"ownerReferences,omitempty"`

		// ResourceVersion Resource version for concurrency control.
		ResourceVersion *string `json:"resourceVersion,omitempty"`

		// SelfLink Deprecated self-link URL.
		SelfLink *string `json:"selfLink,omitempty"`

		// Uid Unique ID assigned by Kubernetes.
		Uid *string `json:"uid,omitempty"`
	} `json:"metadata"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *UpdateGitReleaseJSONBodySpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider UpdateGitReleaseJSONBodySpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec"`

	// Status ReleaseStatus defines the observed state of Release.
	// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
	// (Except for 'context', as controlled by a debug flag)
	Status *struct {
		// Context Context is the resulting context, if requested in debug options
		Context *interface{} `json:"context,omitempty"`

		// Dependencies The result of the package template and release value
		Dependencies *[]string `json:"dependencies,omitempty"`

		// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
		HelmReleaseStates *map[string]struct {
			Ready  string  `json:"ready"`
			Status *string `json:"status,omitempty"`
		} `json:"helmReleaseStates,omitempty"`
		MissingDependency *string `json:"missingDependency,omitempty"`

		// Parameters Parameters is the resulting parameters set, if requested in debug options
		Parameters *interface{} `json:"parameters,omitempty"`
		Phase      *string      `json:"phase,omitempty"`

		// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
		// as printcolumn
		PrintContexts *string `json:"printContexts,omitempty"`

		// PrintDescription PrintDescription
		// Copy of the release description, or, if empty the (templated) package one
		PrintDescription *string `json:"printDescription,omitempty"`

		// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
		PrintProtected *string `json:"printProtected,omitempty"`

		// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
		// It is the value checked by the webhook
		Protected *bool `json:"protected,omitempty"`

		// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
		// as printcolumn
		ReadyReleases *string `json:"readyReleases,omitempty"`

		// Roles The result of the package template and release value
		Roles *[]string `json:"roles,omitempty"`

		// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
		// Key could 'html', 'text', some language id, etc...
		Usage *map[string]string `json:"usage,omitempty"`
	} `json:"status,omitempty"`
}

// UpdateGitReleaseJSONBodySpecPackageProvider defines parameters for UpdateGitRelease.
type UpdateGitReleaseJSONBodySpecPackageProvider string

// UpdateGitReleaseJSONBodySpecPackageVerifyProvider defines parameters for UpdateGitRelease.
type UpdateGitReleaseJSONBodySpecPackageVerifyProvider string

// CreateK8sReleaseJSONBody defines parameters for CreateK8sRelease.
type CreateK8sReleaseJSONBody struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata Standard object metadata.
	Metadata struct {
		// Annotations Arbitrary metadata.
		Annotations *map[string]string `json:"annotations,omitempty"`

		// CreationTimestamp Creation timestamp.
		CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`

		// DeletionGracePeriodSeconds Seconds allowed for graceful termination.
		DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty"`

		// DeletionTimestamp Deletion timestamp.
		DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`

		// Finalizers List of finalizers.
		Finalizers *[]string `json:"finalizers,omitempty"`

		// GenerateName Prefix for generating a unique name.
		GenerateName *string `json:"generateName,omitempty"`

		// Generation Sequence number representing generation of desired state.
		Generation *int64 `json:"generation,omitempty"`

		// Labels Key-value pairs to categorize resources.
		Labels *map[string]string `json:"labels,omitempty"`

		// ManagedFields Managed fields tracking info (complex object).
		ManagedFields *map[string]interface{} `json:"managedFields,omitempty"`

		// Name Name of the resource.
		Name *string `json:"name,omitempty"`

		// Namespace Namespace of the resource.
		Namespace *string `json:"namespace,omitempty"`

		// OwnerReferences References to owning resources.
		OwnerReferences *[]struct {
			ApiVersion *string `json:"apiVersion,omitempty"`
			Kind       *string `json:"kind,omitempty"`
			Name       *string `json:"name,omitempty"`
			Uid        *string `json:"uid,omitempty"`
		} `json:"ownerReferences,omitempty"`

		// ResourceVersion Resource version for concurrency control.
		ResourceVersion *string `json:"resourceVersion,omitempty"`

		// SelfLink Deprecated self-link URL.
		SelfLink *string `json:"selfLink,omitempty"`

		// Uid Unique ID assigned by Kubernetes.
		Uid *string `json:"uid,omitempty"`
	} `json:"metadata"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *CreateK8sReleaseJSONBodySpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider CreateK8sReleaseJSONBodySpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec"`

	// Status ReleaseStatus defines the observed state of Release.
	// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
	// (Except for 'context', as controlled by a debug flag)
	Status *struct {
		// Context Context is the resulting context, if requested in debug options
		Context *interface{} `json:"context,omitempty"`

		// Dependencies The result of the package template and release value
		Dependencies *[]string `json:"dependencies,omitempty"`

		// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
		HelmReleaseStates *map[string]struct {
			Ready  string  `json:"ready"`
			Status *string `json:"status,omitempty"`
		} `json:"helmReleaseStates,omitempty"`
		MissingDependency *string `json:"missingDependency,omitempty"`

		// Parameters Parameters is the resulting parameters set, if requested in debug options
		Parameters *interface{} `json:"parameters,omitempty"`
		Phase      *string      `json:"phase,omitempty"`

		// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
		// as printcolumn
		PrintContexts *string `json:"printContexts,omitempty"`

		// PrintDescription PrintDescription
		// Copy of the release description, or, if empty the (templated) package one
		PrintDescription *string `json:"printDescription,omitempty"`

		// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
		PrintProtected *string `json:"printProtected,omitempty"`

		// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
		// It is the value checked by the webhook
		Protected *bool `json:"protected,omitempty"`

		// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
		// as printcolumn
		ReadyReleases *string `json:"readyReleases,omitempty"`

		// Roles The result of the package template and release value
		Roles *[]string `json:"roles,omitempty"`

		// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
		// Key could 'html', 'text', some language id, etc...
		Usage *map[string]string `json:"usage,omitempty"`
	} `json:"status,omitempty"`
}

// CreateK8sReleaseParams defines parameters for CreateK8sRelease.
type CreateK8sReleaseParams struct {
	// DryRun If true, performs a server-side dry run without persisting the resource
	DryRun *bool `form:"dryRun,omitempty" json:"dryRun,omitempty"`
}

// CreateK8sReleaseJSONBodySpecPackageProvider defines parameters for CreateK8sRelease.
type CreateK8sReleaseJSONBodySpecPackageProvider string

// CreateK8sReleaseJSONBodySpecPackageVerifyProvider defines parameters for CreateK8sRelease.
type CreateK8sReleaseJSONBodySpecPackageVerifyProvider string

// UpdateK8sReleaseJSONBody defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseJSONBody struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata Standard object metadata.
	Metadata struct {
		// Annotations Arbitrary metadata.
		Annotations *map[string]string `json:"annotations,omitempty"`

		// CreationTimestamp Creation timestamp.
		CreationTimestamp *time.Time `json:"creationTimestamp,omitempty"`

		// DeletionGracePeriodSeconds Seconds allowed for graceful termination.
		DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty"`

		// DeletionTimestamp Deletion timestamp.
		DeletionTimestamp *time.Time `json:"deletionTimestamp,omitempty"`

		// Finalizers List of finalizers.
		Finalizers *[]string `json:"finalizers,omitempty"`

		// GenerateName Prefix for generating a unique name.
		GenerateName *string `json:"generateName,omitempty"`

		// Generation Sequence number representing generation of desired state.
		Generation *int64 `json:"generation,omitempty"`

		// Labels Key-value pairs to categorize resources.
		Labels *map[string]string `json:"labels,omitempty"`

		// ManagedFields Managed fields tracking info (complex object).
		ManagedFields *map[string]interface{} `json:"managedFields,omitempty"`

		// Name Name of the resource.
		Name *string `json:"name,omitempty"`

		// Namespace Namespace of the resource.
		Namespace *string `json:"namespace,omitempty"`

		// OwnerReferences References to owning resources.
		OwnerReferences *[]struct {
			ApiVersion *string `json:"apiVersion,omitempty"`
			Kind       *string `json:"kind,omitempty"`
			Name       *string `json:"name,omitempty"`
			Uid        *string `json:"uid,omitempty"`
		} `json:"ownerReferences,omitempty"`

		// ResourceVersion Resource version for concurrency control.
		ResourceVersion *string `json:"resourceVersion,omitempty"`

		// SelfLink Deprecated self-link URL.
		SelfLink *string `json:"selfLink,omitempty"`

		// Uid Unique ID assigned by Kubernetes.
		Uid *string `json:"uid,omitempty"`
	} `json:"metadata"`

	// Spec ReleaseSpec defines the desired state of Release.
	Spec struct {
		// Contexts To provide contextual variables
		// Refer to Context resource description for some explanation
		// Contexts are merged in the following order:
		// - The global default one (defined in Config)
		// - The namespace context (A context with a specific name, defined in config, present in the release namespace)
		// - This ordered list
		// Default: []
		Contexts *[]struct {
			Name      string  `json:"name"`
			Namespace *string `json:"namespace,omitempty"`
		} `json:"contexts,omitempty"`

		// CreateNamespace If true, add  { install: { createNamespace: true } } to config map.
		// Must be set, as used in module.Render()
		// Default: false
		CreateNamespace *bool `json:"createNamespace,omitempty"`

		// Debug Group a set of parameters useful for debugging Release and Package
		Debug *struct {
			// DumpContext DumpContext instruct to save a representation of the context
			// in the Status. This for user debugging?
			DumpContext *bool `json:"dumpContext,omitempty"`

			// DumpParameters DumpParameters instruct to save a representation of the parameters
			// in the Status. This for user debugging?
			DumpParameters *bool `json:"dumpParameters,omitempty"`
		} `json:"debug,omitempty"`

		// Dependencies The roles we depend on. (appended to the one of the underlying package)
		// Default: []
		Dependencies *[]string `json:"dependencies,omitempty"`

		// Description Short description of this release. Single line only
		Description *string `json:"description,omitempty"`

		// Package The package to deploy
		Package struct {
			// CertSecretRef CertSecretRef can be given the name of a Secret containing
			// either or both of
			//
			// - a PEM-encoded client certificate (`tls.crt`) and private
			// key (`tls.key`);
			// - a PEM-encoded CA certificate (`ca.crt`)
			//
			// and whichever are supplied, will be used for connecting to the
			// registry. The client cert and key are useful if you are
			// authenticating with a certificate; the CA cert is useful if
			// you are using a self-signed server certificate. The Secret must
			// be of type `Opaque` or `kubernetes.io/tls`.
			//
			// Note: Support for the `caFile`, `certFile` and `keyFile` keys have
			// been deprecated.
			CertSecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"certSecretRef,omitempty"`

			// Ignore Ignore overrides the set of excluded patterns in the .sourceignore format
			// (which is the same as .gitignore). If not provided, a default will be used,
			// consult the documentation for your version to find out what those are.
			Ignore *string `json:"ignore,omitempty"`

			// Insecure Insecure allows connecting to a non-TLS HTTP container registry.
			Insecure *bool `json:"insecure,omitempty"`

			// Interval Interval at which the OCIRepository URL is checked for updates.
			// This interval is approximate and may be subject to jitter to ensure
			// efficient use of resources.
			Interval string `json:"interval"`

			// Provider The source will be handled by a child fluxCD OciRepository resource, which will be created by this operator
			// All following fields will be replicated in this object
			// The provider used for authentication, can be 'aws', 'azure', 'gcp' or 'generic'.
			// When not specified, defaults to 'generic'.
			// -kubebuilder:default:=generic
			Provider *UpdateK8sReleaseJSONBodySpecPackageProvider `json:"provider,omitempty"`

			// ProxySecretRef ProxySecretRef specifies the Secret containing the proxy configuration
			// to use while communicating with the container registry.
			ProxySecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"proxySecretRef,omitempty"`

			// Repository Part of OCI url oci://<repository>:<tag>
			Repository string `json:"repository"`

			// SecretRef SecretRef contains the secret name containing the registry login
			// credentials to resolve image metadata.
			// The secret must be of type kubernetes.io/dockerconfigjson.
			SecretRef *struct {
				// Name Name of the referent.
				Name string `json:"name"`
			} `json:"secretRef,omitempty"`

			// ServiceAccountName ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate
			// the image pull if the service account has attached pull secrets. For more information:
			// https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
			ServiceAccountName *string `json:"serviceAccountName,omitempty"`

			// Suspend This flag tells the controller to suspend the reconciliation of this source.
			Suspend *bool `json:"suspend,omitempty"`

			// Tag Part of OCI url oci://<repository>:<tag>
			Tag string `json:"tag"`

			// Timeout The timeout for remote OCI Repository operations like pulling, defaults to 60s.
			Timeout *string `json:"timeout,omitempty"`

			// Verify Verify contains the secret name containing the trusted public keys
			// used to verify the signature and specifies which provider to use to check
			// whether OCI image is authentic.
			Verify *struct {
				// MatchOIDCIdentity MatchOIDCIdentity specifies the identity matching criteria to use
				// while verifying an OCI artifact which was signed using Cosign keyless
				// signing. The artifact's identity is deemed to be verified if any of the
				// specified matchers match against the identity.
				MatchOIDCIdentity *[]struct {
					// Issuer Issuer specifies the regex pattern to match against to verify
					// the OIDC issuer in the Fulcio certificate. The pattern must be a
					// valid Go regular expression.
					Issuer string `json:"issuer"`

					// Subject Subject specifies the regex pattern to match against to verify
					// the identity subject in the Fulcio certificate. The pattern must
					// be a valid Go regular expression.
					Subject string `json:"subject"`
				} `json:"matchOIDCIdentity,omitempty"`

				// Provider Provider specifies the technology used to sign the OCI Artifact.
				Provider UpdateK8sReleaseJSONBodySpecPackageVerifyProvider `json:"provider"`

				// SecretRef SecretRef specifies the Kubernetes Secret containing the
				// trusted public keys.
				SecretRef *struct {
					// Name Name of the referent.
					Name string `json:"name"`
				} `json:"secretRef,omitempty"`
			} `json:"verify,omitempty"`
		} `json:"package"`

		// Parameters The Release configuration variables
		Parameters *interface{} `json:"parameters,omitempty"`

		// Protected If true, the webhook will prevent deletion
		// Default: false
		Protected *bool `json:"protected,omitempty"`

		// Roles List of roles fulfilled by this release. (appended to the one of the underlying package)
		// Default: []
		Roles *[]string `json:"roles,omitempty"`

		// SkipDefaultContext If yes, the default context(s) of the configs are not taken in account
		// ,Default: false
		SkipDefaultContext *bool `json:"skipDefaultContext,omitempty"`

		// SpecPatchByModule Allow to patch the HelmRelease.spec for each module
		SpecPatchByModule *map[string]interface{} `json:"specPatchByModule,omitempty"`

		// Suspended If true, HelmRelease update is suspended at KuboCD level
		// (This is NOT the helmRelease.spec.suspend flag, which may be set by Config part)
		// Default: false
		Suspended *bool `json:"suspended,omitempty"`

		// TargetNamespace The namespace to deploy in. (May also be a partial name for a multi-namespaces package)
		// Not required, as it can be setup another way, depending on the package
		// (i.e. the package has a fixed namespace, or several ones).
		// Default: Release.metadata.namespace
		TargetNamespace *string `json:"targetNamespace,omitempty"`
	} `json:"spec"`

	// Status ReleaseStatus defines the observed state of Release.
	// As we want Status to be explicit about provided information, we don't use 'omitempty' in its definition.
	// (Except for 'context', as controlled by a debug flag)
	Status *struct {
		// Context Context is the resulting context, if requested in debug options
		Context *interface{} `json:"context,omitempty"`

		// Dependencies The result of the package template and release value
		Dependencies *[]string `json:"dependencies,omitempty"`

		// HelmReleaseStates HelmReleaseState describe the observed state of child HelmReleases by name
		HelmReleaseStates *map[string]struct {
			Ready  string  `json:"ready"`
			Status *string `json:"status,omitempty"`
		} `json:"helmReleaseStates,omitempty"`
		MissingDependency *string `json:"missingDependency,omitempty"`

		// Parameters Parameters is the resulting parameters set, if requested in debug options
		Parameters *interface{} `json:"parameters,omitempty"`
		Phase      *string      `json:"phase,omitempty"`

		// PrintContexts PrintContextsContexts is a string to list our context. Not technically used, but intended to be displayed
		// as printcolumn
		PrintContexts *string `json:"printContexts,omitempty"`

		// PrintDescription PrintDescription
		// Copy of the release description, or, if empty the (templated) package one
		PrintDescription *string `json:"printDescription,omitempty"`

		// PrintProtected PrintProtected is a copy of Protected, with a Y/n flag. To be used in display
		PrintProtected *string `json:"printProtected,omitempty"`

		// Protected Protected result of Release.spec.protected defaulted to package.spec.protected
		// It is the value checked by the webhook
		Protected *bool `json:"protected,omitempty"`

		// ReadyReleases ReadyReleases is a string to display X/Y helmRelease ready. Not technically used, but intended to be displayed
		// as printcolumn
		ReadyReleases *string `json:"readyReleases,omitempty"`

		// Roles The result of the package template and release value
		Roles *[]string `json:"roles,omitempty"`

		// Usage Usage is the rendering of the Package.spec.usage[key]. Aimed to provide user information.
		// Key could 'html', 'text', some language id, etc...
		Usage *map[string]string `json:"usage,omitempty"`
	} `json:"status,omitempty"`
}

// UpdateK8sReleaseParams defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseParams struct {
	// DryRun If true, performs a server-side dry run without persisting the resource
	DryRun *bool `form:"dryRun,omitempty" json:"dryRun,omitempty"`
}

// UpdateK8sReleaseJSONBodySpecPackageProvider defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseJSONBodySpecPackageProvider string

// UpdateK8sReleaseJSONBodySpecPackageVerifyProvider defines parameters for UpdateK8sRelease.
type UpdateK8sReleaseJSONBodySpecPackageVerifyProvider string

// CreateGitReleaseJSONRequestBody defines body for CreateGitRelease for application/json ContentType.
type CreateGitReleaseJSONRequestBody CreateGitReleaseJSONBody

// UpdateGitReleaseJSONRequestBody defines body for UpdateGitRelease for application/json ContentType.
type UpdateGitReleaseJSONRequestBody UpdateGitReleaseJSONBody

// CreateK8sReleaseJSONRequestBody defines body for CreateK8sRelease for application/json ContentType.
type CreateK8sReleaseJSONRequestBody CreateK8sReleaseJSONBody

// UpdateK8sReleaseJSONRequestBody defines body for UpdateK8sRelease for application/json ContentType.
type UpdateK8sReleaseJSONRequestBody UpdateK8sReleaseJSONBody

// AsClusterAuth0 returns the union data inside the Cluster_Auth as a ClusterAuth0
func (t Cluster_Auth) AsClusterAuth0() (ClusterAuth0, error) {
	var body ClusterAuth0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClusterAuth0 overwrites any union data inside the Cluster_Auth as the provided ClusterAuth0
func (t *Cluster_Auth) FromClusterAuth0(v ClusterAuth0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClusterAuth0 performs a merge with any union data inside the Cluster_Auth, using the provided ClusterAuth0
func (t *Cluster_Auth) MergeClusterAuth0(v ClusterAuth0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClusterAuth1 returns the union data inside the Cluster_Auth as a ClusterAuth1
func (t Cluster_Auth) AsClusterAuth1() (ClusterAuth1, error) {
	var body ClusterAuth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClusterAuth1 overwrites any union data inside the Cluster_Auth as the provided ClusterAuth1
func (t *Cluster_Auth) FromClusterAuth1(v ClusterAuth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClusterAuth1 performs a merge with any union data inside the Cluster_Auth, using the provided ClusterAuth1
func (t *Cluster_Auth) MergeClusterAuth1(v ClusterAuth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClusterAuth2 returns the union data inside the Cluster_Auth as a ClusterAuth2
func (t Cluster_Auth) AsClusterAuth2() (ClusterAuth2, error) {
	var body ClusterAuth2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClusterAuth2 overwrites any union data inside the Cluster_Auth as the provided ClusterAuth2
func (t *Cluster_Auth) FromClusterAuth2(v ClusterAuth2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClusterAuth2 performs a merge with any union data inside the Cluster_Auth, using the provided ClusterAuth2
func (t *Cluster_Auth) MergeClusterAuth2(v ClusterAuth2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsClusterAuth3 returns the union data inside the Cluster_Auth as a ClusterAuth3
func (t Cluster_Auth) AsClusterAuth3() (ClusterAuth3, error) {
	var body ClusterAuth3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromClusterAuth3 overwrites any union data inside the Cluster_Auth as the provided ClusterAuth3
func (t *Cluster_Auth) FromClusterAuth3(v ClusterAuth3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeClusterAuth3 performs a merge with any union data inside the Cluster_Auth, using the provided ClusterAuth3
func (t *Cluster_Auth) MergeClusterAuth3(v ClusterAuth3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Cluster_Auth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Bearer != nil {
		object["bearer"], err = json.Marshal(t.Bearer)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bearer': %w", err)
		}
	}

	if t.Certificate != nil {
		object["certificate"], err = json.Marshal(t.Certificate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'certificate': %w", err)
		}
	}

	if t.InCluster != nil {
		object["inCluster"], err = json.Marshal(t.InCluster)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'inCluster': %w", err)
		}
	}

	if t.Kubeconfig != nil {
		object["kubeconfig"], err = json.Marshal(t.Kubeconfig)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'kubeconfig': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *Cluster_Auth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["bearer"]; found {
		err = json.Unmarshal(raw, &t.Bearer)
		if err != nil {
			return fmt.Errorf("error reading 'bearer': %w", err)
		}
	}

	if raw, found := object["certificate"]; found {
		err = json.Unmarshal(raw, &t.Certificate)
		if err != nil {
			return fmt.Errorf("error reading 'certificate': %w", err)
		}
	}

	if raw, found := object["inCluster"]; found {
		err = json.Unmarshal(raw, &t.InCluster)
		if err != nil {
			return fmt.Errorf("error reading 'inCluster': %w", err)
		}
	}

	if raw, found := object["kubeconfig"]; found {
		err = json.Unmarshal(raw, &t.Kubeconfig)
		if err != nil {
			return fmt.Errorf("error reading 'kubeconfig': %w", err)
		}
	}

	return err
}
