// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
