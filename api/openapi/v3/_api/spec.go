// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9LXP7qxlYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
