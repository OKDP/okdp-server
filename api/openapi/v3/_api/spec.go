// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
