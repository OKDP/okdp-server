// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
