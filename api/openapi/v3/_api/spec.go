// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BJOH64f/DQAA///Dy+n9WY0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
