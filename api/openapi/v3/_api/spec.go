// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
