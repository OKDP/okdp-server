// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
