// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
