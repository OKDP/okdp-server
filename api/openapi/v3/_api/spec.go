// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXU8jNxf+K5bf96KVhpksvctVKaBVVJZGC/RmiyrHczLxMmNPbQ+QRvnvlT32fE9C",
	"CtoC2hsU7OPz9Tzn2HM2mIosFxy4Vni6wYquICP2ZwxLxplmgv95SjRJRWJWcylykJqBlaESYuCakVT1",
	"N6VYCH1CqSi4viQZmDW9zgFPsdKS8QRvg5bQtbgDPiC1DfyKWHwFqs25GBSVLDfuDeplcX85wI9HiTji",
	"1hc8OzNyfMyxnNA7kpSRMA3ZQIAjZ01U8FfBJMR4+qWUuh0IwS0QKcnapgJycSNTo3EpZEY0nuJCMhzs",
	"DMOe+nzRM8ti7KJrJ6u204ix516AH7O0jhFTx4CtTX1FjHmpYDw1LZjw9QqQ2UFiifQKkLPfi3Ab4HuQ",
	"igmu+kpOUMqUNiq8DFoK2dFXIdZT3M76EFYN43vz4i128nIF8h7kuZRC9nOTgVIuaT3vlCa6aDrOuIYE",
	"ZO35Prp57ZUud3BvKKrhcyecGwVyLsWSpQNQQ0ZYOhhMIkWRtwtoDxwBTkXChiuaj7eQFA60oorFvvag",
	"Cleonfyao97NqsDKHFQRe5/25rxoJHa7NabgUYPkJD0TdID7v/16NkexoEUGXBNXz4XpGXilda6mUSTu",
	"4jxkIrJNkC+FbdOCa0J1Ay3MYiZD9jfTouDA4ee7YiE0SUMmfFTOGhVZVnCm1zstdeucKcQUIujz+dU1",
	"OpnPkIQlSOAUqmK12stCMQllFLiCRm5OckJXgI7DSc/yw8NDSOx2KGQSubMqupidnl9enR8dh5NwpbPU",
	"Qs90WgVTmnNe5awudTzFH8JJODEnRA6c5AxP8U92yfRJvbJoRK4P2n8S0H2ELkxvImmKvOQfBiJTLxau",
	"WexkTr0iwy6VC+O/0XY8mXjEgFv9JM9TRu3p6Ksqr7vymm5x/v8SlniK/xfVF3rkbvNo4Crvd8Ieiheu",
	"zRqwqrjLxkCKVB/k5hO9u2r1oJ5HDj6oepQqsozI9VDeTd8jBqgvuFq6NWcqDKON+zWLt6N4fgSNiFeK",
	"FmvE4gFEP4IH1LJFkgw0SGO8q8+JodmZuaW4vUL0qq65yiXcbDtaFhA00tm9Am6fyaJDydOHxsdlWo55",
	"u5jV18qVAUwPY0vUfByOtwGx9C8SZax4g2MMmnulb5JChzYi/3R8QiPyiXlD5Ep34v8v2RZtDMK7e5WT",
	"bdtDhMfVjtGxk4C/rC/LV81/wMJgM4w9cg+tAUNu59U1y4rg74DQT2PV82gdNT/5xptq66OPIJUDZUtG",
	"vSM7mf27O/ud4d+I4RVar/vduIdTL8TraON+Pa2D1+Ht5PRZJfZ++Txqw3+9DZqpN79d5ZA4tliQdN4Y",
	"kpRWOwPA8aKpkX8Tl0LcZODLFkpUh7S3XkpR9ENdAwGyCXvUAQJNf9xZRleloe8l9D5KyKl7C+Wzl7fj",
	"VVUokCrK1nk9mx0tk2yNjDhyssPF8Gntp5HPBLE9IjaGD8jrTWsq2h6/WlW3T2DCp3a8r5oKHWwagFuE",
	"DdrmjFVStqVyHhqRnEX3H7CpOXeiC/1NW293vNyeqyZMr4pFSEVmh7v2z1Fptp7AO5/6HaUx0nwJM/XI",
	"8Xb7TwAAAP//8ILjn6ccAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
