// Package _api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
