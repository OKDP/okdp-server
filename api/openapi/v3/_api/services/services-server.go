// Package _services provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _services

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ListServicesParams defines parameters for ListServices.
type ListServicesParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all services
	// (GET /kad/{kadInstanceId}/services)
	ListServices(c *gin.Context, kadInstanceId string, params ListServicesParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListServices operation middleware
func (siw *ServerInterfaceWrapper) ListServices(c *gin.Context) {

	var err error

	// ------------- Path parameter "kadInstanceId" -------------
	var kadInstanceId string

	err = runtime.BindStyledParameterWithOptions("simple", "kadInstanceId", c.Param("kadInstanceId"), &kadInstanceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kadInstanceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListServicesParams

	// ------------- Optional query parameter "catalog" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalog", c.Request.URL.Query(), &params.Catalog)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalog: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServices(c, kadInstanceId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/kad/:kadInstanceId/services", wrapper.ListServices)
}
