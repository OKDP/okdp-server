// Package _components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _components

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	Oauth2Scopes    = "oauth2.Scopes"
)

// ListComponentsParams defines parameters for ListComponents.
type ListComponentsParams struct {
	// IncludeRawSpec Include or not the raw json spec
	IncludeRawSpec bool `form:"includeRawSpec" json:"includeRawSpec"`
}

// GetComponentsParams defines parameters for GetComponents.
type GetComponentsParams struct {
	// IncludeRawSpec Include or not the raw json spec
	IncludeRawSpec bool `form:"includeRawSpec" json:"includeRawSpec"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all components
	// (GET /components)
	ListComponents(c *gin.Context, params ListComponentsParams)
	// Get a component by componentId
	// (GET /components/{componentId})
	GetComponents(c *gin.Context, componentId string, params GetComponentsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListComponents operation middleware
func (siw *ServerInterfaceWrapper) ListComponents(c *gin.Context) {

	var err error

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComponentsParams

	// ------------- Required query parameter "includeRawSpec" -------------

	if paramValue := c.Query("includeRawSpec"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument includeRawSpec is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "includeRawSpec", c.Request.URL.Query(), &params.IncludeRawSpec)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter includeRawSpec: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListComponents(c, params)
}

// GetComponents operation middleware
func (siw *ServerInterfaceWrapper) GetComponents(c *gin.Context) {

	var err error

	// ------------- Path parameter "componentId" -------------
	var componentId string

	err = runtime.BindStyledParameterWithOptions("simple", "componentId", c.Param("componentId"), &componentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter componentId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComponentsParams

	// ------------- Required query parameter "includeRawSpec" -------------

	if paramValue := c.Query("includeRawSpec"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument includeRawSpec is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "includeRawSpec", c.Request.URL.Query(), &params.IncludeRawSpec)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter includeRawSpec: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetComponents(c, componentId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/components", wrapper.ListComponents)
	router.GET(options.BaseURL+"/components/:componentId", wrapper.GetComponents)
}
