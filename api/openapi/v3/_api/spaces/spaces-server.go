// Package _spaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _spaces

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
	Oauth2Scopes    = "oauth2.Scopes"
)

// CreateSpaceJSONBody defines parameters for CreateSpace.
type CreateSpaceJSONBody struct {
	ToDo1 string `json:"ToDo1"`
	ToDo2 string `json:"toDo2"`
	ToDo3 string `json:"toDo3"`
	ToDo4 string `json:"toDo4"`
}

// UpdateSpaceJSONBody defines parameters for UpdateSpace.
type UpdateSpaceJSONBody struct {
	ToDo1 string `json:"ToDo1"`
	ToDo2 string `json:"toDo2"`
	ToDo3 string `json:"toDo3"`
	ToDo4 string `json:"toDo4"`
}

// CreateSpaceJSONRequestBody defines body for CreateSpace for application/json ContentType.
type CreateSpaceJSONRequestBody CreateSpaceJSONBody

// UpdateSpaceJSONRequestBody defines body for UpdateSpace for application/json ContentType.
type UpdateSpaceJSONRequestBody UpdateSpaceJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all spaces
	// (GET /spaces)
	ListSpaces(c *gin.Context)
	// Create a new space
	// (POST /spaces)
	CreateSpace(c *gin.Context)
	// Delete a space
	// (DELETE /spaces/{spaceId})
	DeletSpace(c *gin.Context, spaceId string)
	// Get a space by spaceId
	// (GET /spaces/{spaceId})
	GetSpaces(c *gin.Context, spaceId string)
	// Update a space
	// (PUT /spaces/{spaceId})
	UpdateSpace(c *gin.Context, spaceId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListSpaces operation middleware
func (siw *ServerInterfaceWrapper) ListSpaces(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListSpaces(c)
}

// CreateSpace operation middleware
func (siw *ServerInterfaceWrapper) CreateSpace(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSpace(c)
}

// DeletSpace operation middleware
func (siw *ServerInterfaceWrapper) DeletSpace(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletSpace(c, spaceId)
}

// GetSpaces operation middleware
func (siw *ServerInterfaceWrapper) GetSpaces(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSpaces(c, spaceId)
}

// UpdateSpace operation middleware
func (siw *ServerInterfaceWrapper) UpdateSpace(c *gin.Context) {

	var err error

	// ------------- Path parameter "spaceId" -------------
	var spaceId string

	err = runtime.BindStyledParameterWithOptions("simple", "spaceId", c.Param("spaceId"), &spaceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter spaceId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	c.Set(Oauth2Scopes, []string{"openid", "email", "profile", "roles"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSpace(c, spaceId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/spaces", wrapper.ListSpaces)
	router.POST(options.BaseURL+"/spaces", wrapper.CreateSpace)
	router.DELETE(options.BaseURL+"/spaces/:spaceId", wrapper.DeletSpace)
	router.GET(options.BaseURL+"/spaces/:spaceId", wrapper.GetSpaces)
	router.PUT(options.BaseURL+"/spaces/:spaceId", wrapper.UpdateSpace)
}
