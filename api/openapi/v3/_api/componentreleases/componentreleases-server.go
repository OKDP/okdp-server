// Package _componentreleases provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package _componentreleases

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ListComponentReleasesParams defines parameters for ListComponentReleases.
type ListComponentReleasesParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// GetComponentReleaseParams defines parameters for GetComponentRelease.
type GetComponentReleaseParams struct {
	// Catalog Filter by catalogs (comma separated)
	Catalog *string `form:"catalog,omitempty" json:"catalog,omitempty"`
}

// CreateOrUpdateComponentReleaseJSONBody defines parameters for CreateOrUpdateComponentRelease.
type CreateOrUpdateComponentReleaseJSONBody struct {
	Comment           string `json:"comment"`
	ComponentReleases []struct {
		Component struct {
			// Config Additional configuration
			Config         *map[string]interface{} `json:"config,omitempty"`
			Name           string                  `json:"name"`
			ParameterFiles *[]struct {
				Document *string `json:"document,omitempty"`
				File     *string `json:"file,omitempty"`
				Unwrap   *string `json:"unwrap,omitempty"`
				Wrap     *string `json:"wrap,omitempty"`
			} `json:"parameterFiles,omitempty"`

			// Parameters List of paramters as key/value pairs
			Parameters *map[string]interface{} `json:"parameters,omitempty"`
			Protected  *bool                   `json:"protected,omitempty"`
			Source     *struct {
				Version string `json:"version"`
			} `json:"source,omitempty"`
			Suspended *bool `json:"suspended,omitempty"`

			// Values List of values as key/value pairs
			Values  *map[string]interface{} `json:"values,omitempty"`
			Version string                  `json:"version"`
		} `json:"component"`
		DependsOn *[]string `json:"dependsOn,omitempty"`
		Enabled   *bool     `json:"enabled,omitempty"`
		Name      string    `json:"name"`
		Namespace *string   `json:"namespace,omitempty"`
		Roles     *[]string `json:"roles,omitempty"`
	} `json:"componentReleases"`
	GitRepoFolder string `json:"gitRepoFolder"`
}

// CreateOrUpdateComponentReleaseJSONRequestBody defines body for CreateOrUpdateComponentRelease for application/json ContentType.
type CreateOrUpdateComponentReleaseJSONRequestBody CreateOrUpdateComponentReleaseJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all component releases
	// (GET /kad/{kadInstanceId}/componentreleases)
	ListComponentReleases(c *gin.Context, kadInstanceId string, params ListComponentReleasesParams)
	// Get a component release by name
	// (GET /kad/{kadInstanceId}/componentreleases/{name})
	GetComponentRelease(c *gin.Context, kadInstanceId string, name string, params GetComponentReleaseParams)
	// Create or update a component release
	// (PUT /kad/{kadInstanceId}/componentreleases/{name})
	CreateOrUpdateComponentRelease(c *gin.Context, kadInstanceId string, name string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListComponentReleases operation middleware
func (siw *ServerInterfaceWrapper) ListComponentReleases(c *gin.Context) {

	var err error

	// ------------- Path parameter "kadInstanceId" -------------
	var kadInstanceId string

	err = runtime.BindStyledParameterWithOptions("simple", "kadInstanceId", c.Param("kadInstanceId"), &kadInstanceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kadInstanceId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComponentReleasesParams

	// ------------- Optional query parameter "catalog" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalog", c.Request.URL.Query(), &params.Catalog)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalog: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListComponentReleases(c, kadInstanceId, params)
}

// GetComponentRelease operation middleware
func (siw *ServerInterfaceWrapper) GetComponentRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "kadInstanceId" -------------
	var kadInstanceId string

	err = runtime.BindStyledParameterWithOptions("simple", "kadInstanceId", c.Param("kadInstanceId"), &kadInstanceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kadInstanceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComponentReleaseParams

	// ------------- Optional query parameter "catalog" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalog", c.Request.URL.Query(), &params.Catalog)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter catalog: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetComponentRelease(c, kadInstanceId, name, params)
}

// CreateOrUpdateComponentRelease operation middleware
func (siw *ServerInterfaceWrapper) CreateOrUpdateComponentRelease(c *gin.Context) {

	var err error

	// ------------- Path parameter "kadInstanceId" -------------
	var kadInstanceId string

	err = runtime.BindStyledParameterWithOptions("simple", "kadInstanceId", c.Param("kadInstanceId"), &kadInstanceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kadInstanceId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateOrUpdateComponentRelease(c, kadInstanceId, name)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/kad/:kadInstanceId/componentreleases", wrapper.ListComponentReleases)
	router.GET(options.BaseURL+"/kad/:kadInstanceId/componentreleases/:name", wrapper.GetComponentRelease)
	router.PUT(options.BaseURL+"/kad/:kadInstanceId/componentreleases/:name", wrapper.CreateOrUpdateComponentRelease)
}
