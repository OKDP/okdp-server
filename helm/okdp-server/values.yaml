# -- Desired number of okdp-server pods to run.
replicaCount: 1

image:
  # -- Docker image registry.
  repository: quay.io/okdp/okdp-server
  # -- Image pull policy.
  pullPolicy: Always
  # -- Image tag.
  tag: "0.3.0"

# -- Secrets to be used for pulling images from private Docker registries.
imagePullSecrets: []
# -- Override for the `okdp-server.fullname` template, maintains the release name.
nameOverride: ""
# -- Overrides the release name.
fullnameOverride: ""

configuration:
  # -- List of Kubernetes clusters this chart will interact with
  clusters:
    # -- Unique identifier for the cluster
    - id: kubo2
      # -- Human-readable name for the cluster
      name: "My k8s cluster 1"
      # -- Environment tag (e.g., dev, staging, prod)
      env: dev
      auth:
        # -- Use in-cluster authentication
        inCluster: true
        # kubeconfig:
        #   apiServer: https://host.docker.internal:56660 # -- Kubernetes API server address
        #   path: /tmp/.kube/config # -- Path to the kubeconfig file
        #   # context: kind-kind-okdp-sandbox # -- Optional: specify kubeconfig context to use
        #   insecureSkipTlsVerify: true # -- Skip TLS verification (not recommended in production)

        # -- Optional certificate-based authentication
        # certificate:
        #   apiServer: https://k8s-api-server-url:6443 # -- API server for certificate auth
        #   clientKey: /path/to/client-key.pem # -- Path to client key
        #   clientCert: /path/to/client-cert.pem # -- Path to client certificate
        #   caCert: /path/to/ca-cert.pem # -- Path to CA certificate

        # -- Optional bearer token authentication
        # bearer:
        #   apiServer: https://k8s-api-server-url:6443 # -- API server for bearer token auth
        #   bearerToken: $(BEARER_TOKEN) # -- Bearer token used to authenticate
  
  # -- List of catalogs available to this chart
  catalog:
    # -- Unique identifier for the catalog
    - id: storage
      # -- Human-readable name of the catalog
      name: "Storage catalog"
      # -- Description of the catalog's purpose
      description: "My Storage packages"
      # -- OCI registry URL to pull packages from
      repoUrl: quay.io/kubocd/packages

      # -- Credentials for private registries (optional)
      # credentials:
      #   -- Robot account username for private registry
      #   robotAccountName: $(OCI_USERNAME)
      #   -- Robot account token for private registry
      #   robotAccountToken: $(OCI_PASSWORD)
      #   -- Base64-encoded Docker config JSON
      #   dockerconfigjson: $(DOCKER_CONFIG_JSON)

      # -- List of packages under this catalog
      packages:
        # -- Name of the package
        - name: redis
        - name: minio
        - name: cnpg

    - id: auth
      name: "Auth catalog"
      description: "My Auth packages"
      repoUrl: quay.io/kubocd/packages
      packages:
        - name: openldap

    - id: infra
      name: "Infra catalog"
      description: "My Infra packages"
      repoUrl: quay.io/kubocd/packages
      packages:
        - name: cert-manager
        - name: ingress-nginx
        - name: metallb

    - id: stack
      name: "Stack catalog"
      description: "My Stack packages"
      repoUrl: quay.io/kubocd/packages
      packages:
        - name: podinfo
        
  server:
    # -- Specify the Server listen address.
    listenAddress: 0.0.0.0
    # -- Specify the Server listen port.
    port: 8090
    # -- Specify the Server Mode. One of `debug`, `release` or `test`.
    mode: debug

  logging:
    # -- Specify the logging level. One of `debug`, `info`, `warn`, `error`, `fatal` or `panic`.
    level: "debug"
    # -- Specify the logging format. One of `console` or `json`.
    format: "console"

  security:
    authN:
      # -- Specify the oidc privider. One of `openid` or `bearer`.
      provider: ["bearer"]
      # openid:
      #   clientId: confidential-oidc-client
      #   clientSecret: secret1
      #   issuerUri: http://keycloak:7080/realms/master
      #   redirectUri: http://localhost:8090/oauth2/callback
      #   cookieSecret: secret1!
      #   scope: "openid+profile+email+roles"
      #   rolesAttributePath: "realm_access.roles"
      #   groupsAttributePath: "realm_access.groups"
      bearer:
        # -- Specify the issuer uri.
        issuerUri: ""
        # -- Specify the jwks URL.
        jwksURL: ""
        # -- Specify the roles attribute path from json access token.
        rolesAttributePath: "realm_access.roles"
        # -- Specify the groups attribute path from json access token.
        groupsAttributePath: "realm_access.groups"
        # -- Wether to skip issuer check.
        skipIssuerCheck: false
        # -- Wether to skip issuer signature check.
        skipSignatureCheck: false
    authZ:
      # -- Specify the authZ storage provider. One of `inline` or `file`.
      provider: "inline"
      # -- The casbin policy contains the actual rules that determine who can access what.
      # -- Specify the casbin permissions to allow to an uri based on oidc groups/roles.
      # -- More info: https://casbin.org/docs/how-it-works/
      # file:
      #   modelPath: ".local/authz-model.conf"
      #   policyPath: ".local/authz-policy.csv"
      inline:
        policy: |
          p, role:viewers, /api/v1/users/myprofile, *
          p, role:viewers, /api/v1/catalogs, *
          p, role:viewers, /api/v1/catalogs/*, *

          p, role:viewers, /api/v1/clusters, *
          p, role:viewers, /api/v1/clusters/*/gitrepos, *
          p, role:viewers, /api/v1/clusters/*/gitrepos/*, *

          g, role:admins, role:developers
          g, role:developers, role:viewers
        # -- Specify the casbin model (enforcement logic).
        # -- More info: https://casbin.org/docs/how-it-works/
        model: |
          [request_definition]
          r = sub, obj, act

          [policy_definition]
          p = sub, obj, act

          [role_definition]
          g = _, _

          [policy_effect]
          e = some(where (p.eft == allow))

          [matchers]
          m = g(r.sub, p.sub) && keyMatch(r.obj, p.obj) && (r.act == p.act || p.act == "*")

    cors:
      # -- Specify the allowed origins for cross-origin requests. "*" allows all origins.
      allowedOrigins: ["*"]
      # -- Define the HTTP methods permitted for CORS requests.
      allowedMethods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", "HEAD"]
      # -- List the headers that clients are allowed to include in requests.
      allowedHeaders: ["Origin", "Accept", "Authorization", "Content-Length", "Content-Type"]
      # -- Specify which response headers should be exposed to the client.
      exposedHeaders: ["Content-Length"]
      # -- Determine whether cookies and authentication credentials should be included in cross-origin requests.
      allowCredentials: true 
      # -- Define how long (in seconds) the results of a preflight request can be cached by the client.
      maxAge: 3600
    headers:
      # -- Prevent the page from being embedded in an iframe, mitigating clickjacking attacks.
      X-Frame-Options: "DENY"
      # -- Prevent browsers from MIME-sniffing a response away from the declared content type.
      X-Content-Type-Options: nosniff

  swagger:
    securitySchemes:
      oauth2:
        type: oauth2
        flows:
          authorizationCode:
            authorizationUrl:
            tokenUrl:
            scopes: 
              openid: OpenId Authentication
              email: User Email
              profile: User Profile
              roles: User Roles
    security:
      - oauth2: [openid, email, profile, roles]

swagger-ui:
  # — Whether to enable or disable swagger UI.
  enabled: true
  configuration:
    # -- Specify swagger configuration with environment variables (https://swagger.io/docs/open-source-tools/swagger-ui/usage/oauth2/)
    extraEnv:
      # -- Specify base url.
      - name: BASE_URL
        value: /
      # -- Specify the list of api servers swagger docs to serve.
      - name: URLS
        value:
      # -- Specify the Oauth2 client Id. The client ID must be be public for production.
      - name: OAUTH_CLIENT_ID
        value:
      # -- Specify the Oauth2 scopes.
      - name: OAUTH_SCOPES
        value: "openid profile email roles"
      # — Whether to use PKCE or not. Recommended if the provider supports it.
      - name: OAUTH_USE_PKCE
        value: true
      # — Whether to enable or not CORS.
      - name: CORS_ENABLED
        value: true

serviceAccount:
  # -- Specify whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # -- If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  # -- Specify whether a RBAC should be created
  create: true
  # -- Specify annotations for the proxy.
  annotations: {}

# -- Additional annotations for the okdp-server pod.
podAnnotations: {}
# -- Additional labels for the okdp-server pod.
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

# -- Security context for the container.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8090

# Ingress configuration for external access.
ingress:
  enabled: false
  # -- Specify the ingress class (Kubernetes >= 1.18).
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Liveness probe for the okdp-server container.
livenessProbe:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
# -- Readiness probe for the okdp-server container.
readinessProbe:
  httpGet:
    path: /readiness
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# -- Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# -- Node selector for pod scheduling.
nodeSelector: {}

# -- Tolerations for pod scheduling.
tolerations: []

# -- Affinity for pod scheduling.
affinity: {}
