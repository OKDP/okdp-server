server:
  listenAddress: 0.0.0.0
  port: 8090
  mode: debug

logging:
  # debug, info, warn, error, fatal, panic
  level: "debug"
  # console or json
  format: "console"
  
security:
  authN:
    provider: ["basic", "openid"]
    openid:
      clientId: confidential-oidc-client
      clientSecret: secret1
      issuerUri: http://keycloak:7080/realms/master
      redirectUri: http://localhost:8090/oauth2/callback
      cookieSecret: secret1!
      scope: "openid+profile+email+roles"
      rolesAttributePath: "realm_access.roles"
      groupsAttributePath: "realm_access.groups"
    bearer:
      issuerUri: http://keycloak:7080/realms/master
      jwksURL: http://keycloak:7080/realms/master/protocol/openid-connect/certs
      rolesAttributePath: "realm_access.roles"
      groupsAttributePath: "realm_access.groups"
      skipIssuerCheck: true
      skipSignatureCheck: false
    # Static users for sandbox testing
    basic:
      - login: "dev1"
        password: "passW!"
        firstName: "dev1"
        lastName: "dev"
        email: "dev1.dev@example.org"
        roles: ["developers", "team1"]
  authZ:
    provider: file
    file:
      modelPath: "testdata/security/authz-model.conf"
      policyPath: "testdata/security/authz-policy.csv"
    database:
      host: "localhost"
      port: 5432
      username: "adm"
      password: "passDB!"
      name: "okdp"
  cors:
    allowedOrigins: ["*"]
    allowedMethods: ["GET", "POST", "PUT", "DELETE", "PATCH"]
    allowedHeaders: ["Accept", "Authorization", "Content-Type", "X-CSRF-Token"]
    exposedHeaders: ["Link"]
    allowCredentials: true 
    maxAge: 3600
  headers:
    x-frame-options: "DENY"
    x-content-type-options: nosniff

swagger:
  securitySchemes:
    oauth2:
      type: "oauth2"
      flows:
        authorizationCode:
          authorizationUrl: "http://keycloak:7080/realms/master/protocol/openid-connect/auth"
          tokenUrl: "http://keycloak:7080/realms/master/protocol/openid-connect/token"
          scopes: 
            openid: "OpenId Authentication"
            email: "User Email"
            profile: "User Profile"
            roles: "User Roles"
  security:
    - oauth2: [openid, email, profile, roles]

catalog:
  - id: infra01
    name: infra01 catalog
    description: My infrastructure components
    repoUrl: quay.io/okdp/applications
    credentials:
      robotAccountName: $(OCI_USERNAME)
      robotAccountToken: $(OCI_PASSWORD)
    packages:
      - name: redis
      - name: podinfo
      - name: cert-manager

  - id: infra02
    name: infra02 catalog
    description: My infrastructure components
    repoUrl: quay.io/okdp/applications
    packages:
      - name: minio
      
clusters:
  - id: kubo03dev
    name: k8s infra dev
    env: dev
    auth:
      kubeconfig:
        apiServer: https://host.docker.internal:56660
        path: /path/to/kubeconfig
        context: dev-context
        insecureSkipTlsVerify: True
      certificate:
        apiServer: https://k8s-api-server-url:6443
        clientKey: /path/to/client-key.pem
        clientCert: /path/to/client-cert.pem
        caCert: /path/to/ca-cert.pem
      bearer:
        apiServer: https://k8s-api-server-url:6443
        bearerToken: $(BEARER_TOKEN)



