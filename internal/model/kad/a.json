[
    {
        "kind": "component",
        "spec": {
            "name": "jupyterhub",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "3.3.7"
                ],
                "defaultVersion": "3.3.7",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://hub.jupyter.org/helm-chart/",
                    "chart": "jupyterhub",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": {
                "adminGroups": "ops",
                "allowedGroups": "devs",
                "ingressPrefix": "jupyterhub"
            },
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "hub:\n  config:\n    Authenticator:\n      auto_login: true\n    GenericOAuthenticator:\n      client_id: Jhub\n      client_secret: AsjhDFJcnsdlkjrEdEF\n      oauth_callback_url: https://{{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}/hub/oauth_callback\n      authorize_url: https://dex.{{ .Context.ingress.url }}/auth\n      token_url: https://dex.{{ .Context.ingress.url }}/token\n      userdata_url: https://dex.{{ .Context.ingress.url }}/userinfo\n      validate_server_cert: false\n      admin_groups:\n        - {{ .Parameters.adminGroups }}\n      allowed_groups:\n        - {{ .Parameters.allowedGroups }}\n      scope:\n        - openid\n        - profile\n        - email\n        - groups\n      username_key: name\n    JupyterHub:\n      authenticator_class: generic-oauth\n  networkPolicy:\n    enabled: false\n  extraConfig:\n    extraConfig01.py: |\n      c.KubeSpawner.delete_grace_period = 120\n      c.ServerApp.allow_root = True\n  image:\n    pullPolicy: Always\n    pullSecrets: []\n    name: quay.io/jupyterhub/k8s-hub\n    tag: \"3.3.7\"\n  db:\n    type: sqlite-pvc\n    pvc:\n      storage: 1Gi\n      storageClassName: \"{{ .Context.storageClass.workspace }}\"\n\nrbac:\n  create: true\n\ncull:\n  enabled: false\n\nproxy:\n  service:\n    type: ClusterIP\n\ningress:\n  enabled: true\n  annotations:\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"{{ .Context.certificateIssuer.public }}\"\n  ingressClassName: nginx\n  hosts:\n    - \"{{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}\"\n  tls:\n    - secretName: {{ .Parameters.ingressPrefix }}-tls\n      hosts:\n        - {{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}\n\nscheduling:\n  userScheduler:\n    enabled: false\n  userPlaceholder:\n    enabled: false\n\nsingleuser:\n  image:\n    name: ghcr.io/kubotal/spark-notebook\n    tag: \"2024-05-27-001\"\n\n  storage:\n    homeMountPath: \"/home/{username}\"\n    dynamic:\n      storageClass: standard\n    type: dynamic\n  cloudMetadata:\n    blockWithIptables: false\n  uid: 0\n  fsGid: 0\n  extraEnv:\n    NB_USER: \"$(JUPYTERHUB_USER)\"\n    NB_UID: \"1001\"\n    NB_GID: \"100\"\n    CHOWN_HOME: \"yes\"\n    CHOWN_HOME_OPTS: \"-R\"\n    JUPYTER_ENABLE_LAB: \"yes\"\n    EDITOR: \"vim\"\n    GIT_SSL_NO_VERIFY: \"false\"\n  extraPodConfig:\n    automount_service_account_token: false\n    terminationGracePeriodSeconds: 120\n  networkPolicy:\n    enabled: false\nprePuller:\n  hook:\n    enabled: false\n  continuous:\n    enabled: false\n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/jupyterhub.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "jupyterhub"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "cert:cert-manager",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "v1.14.4"
                ],
                "defaultVersion": "v1.14.4",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://charts.jetstack.io",
                    "chart": "cert-manager",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": null,
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": {
                "enableCertificateOwnerRef": true,
                "installCRDs": true
            },
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": [
                "certManagerBase"
            ],
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/system/certmanager.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "cert-manager-main"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "openldap",
            "version": "1.0.0",
            "catalogs": [
                "middleware",
                "identity"
            ],
            "usage": "{{ .Meta.componentRelease.name }} LDAP server\n\u003cul\u003e\n\u003cli\u003e\nA console can be accessed using \u003ca href=\"{{ .Parameters.adminIngressHost }}\"\u003ethis link\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003e\nYou can access the LDAP services using the following parameters:\n\u003cul\u003e\n\u003cli\u003ehost: {{ printf \"%s.%s\" .Parameters.ldapIngressHost }}\u003c/li\u003e\n\u003cli\u003eport: 636 (LDAPS)\u003c/li\u003e\n{{- $parts := split \".\" .Parameters.ldapDomain }}\n{{- $login := .Parameters.adminUser }}\n{{- range $parts }}\n{{- $login = printf \"%s,cn=%s\" $login . }}\n{{- end }}\n\u003cli\u003elogin: cn={{ $login }}\u003c/li\u003e\n\u003cli\u003ePassword: {{.Parameters.adminPassword }}\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true,
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                },
                "source": {
                    "interval": "2m"
                },
                "timeout": "5m",
                "upgrade": {
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                }
            },
            "suspended": false,
            "protected": true,
            "source": {
                "allowedVersions": [
                    "4.2.2"
                ],
                "defaultVersion": "4.2.2",
                "gitRepository": {
                    "name": "kad-components",
                    "path": "./charts/openldap/{version}/",
                    "unmanaged": false,
                    "namespace": ""
                },
                "ociRepository": null,
                "helmRepository": null
            },
            "parameters": {
                "adminIngressHost": "phpldapadmin",
                "adminPassword": null,
                "adminUser": "admin",
                "certificateIssuer": null,
                "configPassword": null,
                "configUser": "admin",
                "customLdifFiles": null,
                "ldapDomain": null,
                "ldapIngressHost": "ldap",
                "replicaCount": null,
                "storageClass": null
            },
            "parametersSchema": {
                "File": "_schemas_/parameters/openldap.yaml",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "openldap-stack-ha:\n  replicaCount: {{ .Parameters.replicaCount }}\n  replication:\n    enabled: {{ if ne .Parameters.replicaCount 1 }}true{{else}}false{{end}}\n  clusterIssuer: {{ .Parameters.certificateIssuer }}\n  global:\n    ldapDomain: {{ .Parameters.ldapDomain }}\n    adminUser: {{ .Parameters.adminUser }}\n    adminPassword: {{ .Parameters.adminPassword }}\n    configUser: {{ .Parameters.configUser }}\n    configPassword: {{ .Parameters.configPassword }}\n  initTLSSecret:\n    tls_enabled: true\n    secret: {{ .Meta.componentRelease.name }}-cert\n  persistence:\n    storageClass: {{ .Parameters.storageClass }}\n  phpldapadmin:\n    ingress:\n      annotations:\n        cert-manager.io/cluster-issuer: {{ .Parameters.certificateIssuer }}\n      hosts:\n        - {{ .Parameters.adminIngressHost }}\n      tls:\n        - hosts:\n            - {{ .Parameters.adminIngressHost }}\n          secretName: phpldapadmin-tls\n  # Custom openldap configuration files used to override default settings\n  # DO NOT FORGET to put the Root Organisation object as it won't be created while using customLdifFiles\n  # To generate passwords: 'slappasswd -s myPassword' on an ldap node\n  customLdifFiles:\n    {{ toYaml .Parameters.customLdifFiles | nindent 10 }}\n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": [
                "ldapLocalServer"
            ],
            "dependsOn": [
                "ingress"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/openldap.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": false,
                "description": "OpenLDAP Software is an open source implementation of the Lightweight Directory Access Protocol.\n",
                "properties": {
                    "adminIngressHost": {
                        "default": "phpldapadmin",
                        "type": "string"
                    },
                    "adminPassword": {
                        "type": "string"
                    },
                    "adminUser": {
                        "default": "admin",
                        "type": "string"
                    },
                    "certificateIssuer": {
                        "type": "string"
                    },
                    "configPassword": {
                        "type": "string"
                    },
                    "configUser": {
                        "default": "admin",
                        "type": "string"
                    },
                    "customLdifFiles": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "ldapDomain": {
                        "type": "string"
                    },
                    "ldapIngressHost": {
                        "default": "ldap",
                        "type": "string"
                    },
                    "replicaCount": {
                        "default": 1,
                        "type": "integer"
                    },
                    "storageClass": {
                        "type": "string"
                    }
                },
                "required": [
                    "ldapDomain",
                    "adminPassword",
                    "configPassword",
                    "customLdifFiles",
                    "certificateIssuer"
                ],
                "title": "OpenLDAP",
                "type": "object"
            },
            "releases": [
                "openldap"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "tools:replicator",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "2.9.2"
                ],
                "defaultVersion": "2.9.2",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://helm.mittwald.de",
                    "chart": "kubernetes-replicator",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": null,
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": {
                "livenessProbe": {
                    "initialDelaySeconds": 10
                },
                "podSecurityContext": {
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "readinessProbe": {
                    "initialDelaySeconds": 10
                },
                "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                        "drop": [
                            "ALL"
                        ]
                    },
                    "readOnlyRootFilesystem": true,
                    "runAsNonRoot": true,
                    "runAsUser": 1000
                }
            },
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/tools.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "tools-replicator"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "superset",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "v0.12.10-rc.1"
                ],
                "defaultVersion": "v0.12.10-rc.1",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://okdp.github.io/charts/",
                    "chart": "superset",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": {
                "adminGroups": "ops",
                "ingressPrefix": "superset"
            },
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "okdp:\n  # Superset configuration\n  superset:\n    superset_secret_key: \"22NJRoghIFHFK6vo7wWB+m/8TL//eKEo7phKEhGtsGiBLkLpx5WKA7k7\"\n    extra_config: \u0026extra_config |\n      from datetime import timedelta\n      # Set up max age of session to 8 hours\n      PERMANENT_SESSION_LIFETIME = timedelta(hours=8)\n      # This will make sure the redirect_uri is properly computed, even with SSL offloading\n      ENABLE_PROXY_FIX = True\n    feature_flags: \u0026feature_flags |\n      # https://github.com/apache/superset/blob/master/RESOURCES/FEATURE_FLAGS.md\n      FEATURE_FLAGS = {\n        \"DASHBOARD_RBAC\": True,\n        \"EMBEDDED_SUPERSET\": True,\n        \"EMBEDDABLE_CHARTS\": True,\n        \"ENABLE_TEMPLATE_PROCESSING\": True,\n        \"DASHBOARD_NATIVE_FILTERS\": True,\n        \"DASHBOARD_CROSS_FILTERS\": True,\n      }\n    load_examples:\n      enabled: true\n      #SQLALCHEMY_EXAMPLES_URI: 'sqlite:////app/superset_home/examples.db'\n      SQLALCHEMY_EXAMPLES_URI: \"postgresql+psycopg2://superset:superset@{{ .Meta.componentRelease.name }}-postgresql:5432\"\n      #SQLALCHEMY_EXAMPLES_URI: 'trino://trino@trino:8080/nessie/examples'\n\n  # Oauth2 configuration\n  oauth:\n    enabled: true\n    provider: dex\n    base_url: 'https://dex.ingress.kind.local'\n    client_id: \"superset\"\n    #For public clients, the 'client_secret' is not required\n    client_secret: \"DFJcnsdlkjrEAsjhdEF\"\n    #provider: keycloak\n    #base_url: \"https://keycloak.okdp.sandbox/auth/realms/master/protocol/openid-connect\"\n    #client_id: \"keycloak-oidc\"\n    ##For public clients, the 'client_secret' is not required\n    #client_secret: \"1WZiYMkcPgCwncmqYz4ab1l7J6OqFrEo\"\n    scope: \"openid profile email groups\"\n    #scope: \"openid profile email roles\"\n    use_pkce: true\n    #use_pkce: false\n    ssl_certificate_verify: \"False\"\n    auth_registration: \u0026auth_registration |\n      AUTH_USER_REGISTRATION = True\n      AUTH_ROLE_PUBLIC = \"Public\"\n      AUTH_USER_REGISTRATION_ROLE = \"Public\"\n      AUTH_ROLES_SYNC_AT_LOGIN = True\n    oauth2_superset_roles_mapping: \u0026oauth2_superset_roles_mapping |\n      AUTH_ROLES_MAPPING = {\n        # dex\n        \"{{ .Parameters.adminGroups }}\": [\"Admin\"],\n        \"team1\": [\"Gamma\", \"sql_lab\"],\n        \"team2\": [\"Alpha\"],\n        # keycloack\n        \"/team1\": [\"Admin\"],\n      }\n\nsuperset:\n  supersetNode:\n    # Connections to an existing database and cache\n    connections:\n      # -- Change in case of bringing your own redis and then also set redis.enabled:false\n      redis_host: \"{{ .Meta.componentRelease.name }}-redis-headless\"\n      redis_port: \"6379\"\n      redis_user: \"\"\n      # redis_password: superset\n      redis_cache_db: \"1\"\n      redis_celery_db: \"0\"\n      # Or SSL port is usually 6380\n      # Update following for using Redis with SSL\n      redis_ssl:\n        enabled: false\n        ssl_cert_reqs: CERT_NONE\n      # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false\n      db_host: \"{{ .Meta.componentRelease.name }}-postgresql\"\n      db_port: \"5432\"\n      db_user: superset\n      db_pass: superset\n      db_name: superset\n\n  # If no existing redis cache provided, enable to use the bitnami redis cache\n  # The credentials should match 'superset.supersetNode.connections'\n  redis:\n    enabled: true\n    architecture: standalone\n    auth:\n      ## Enable password authentication\n      enabled: false\n      ## Credentials: ## superset.supersetNode.connections.redis_*\n\n  ingress:\n    enabled: true\n    ingressClassName: \"nginx\"\n    annotations:\n      kubernetes.io/ingress.class: nginx\n      cert-manager.io/cluster-issuer: {{ .Context.certificateIssuer.public }}\n      acme.cert-manager.io/http01-edit-in-place: \"true\"\n      # kubernetes.io/tls-acme: \"true\"\n      ## Extend timeout to allow long running queries.\n      nginx.ingress.kubernetes.io/proxy-connect-timeout: \"300\"\n      nginx.ingress.kubernetes.io/proxy-read-timeout: \"300\"\n      nginx.ingress.kubernetes.io/proxy-send-timeout: \"300\"\n      nginx.ingress.kubernetes.io/proxy-buffer-size: \"128k\"\n    path: /\n    pathType: ImplementationSpecific\n    hosts:\n      - {{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}\n    tls:\n      - hosts:\n          - {{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}\n        secretName: \"superset-tls-secret\"\n\n  configOverrides:\n    auth_registration: *auth_registration\n    oauth_to_superset_roles_mapping: *oauth2_superset_roles_mapping\n    extra_config: *extra_config\n    feature_flags: *feature_flags\n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/superset.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "superset"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "cert:issuers",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": null,
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "0.1.0"
                ],
                "defaultVersion": "0.1.0",
                "gitRepository": {
                    "name": "kad-components",
                    "path": "charts/cert-issuers/{version}",
                    "unmanaged": false,
                    "namespace": ""
                },
                "ociRepository": null,
                "helmRepository": null
            },
            "parameters": {
                "caClusterIssuers": null,
                "selfsignedClusterIssuers": null
            },
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": {
                    "$schema": "http://json-schema.org/schema#",
                    "additionalProperties": false,
                    "properties": {
                        "caClusterIssuers": {
                            "items": {
                                "additionalProperties": false,
                                "properties": {
                                    "ca_crt": {
                                        "type": "string"
                                    },
                                    "ca_key": {
                                        "type": "string"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name",
                                    "ca_crt",
                                    "ca_key"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "selfsignedClusterIssuers": {
                            "items": {
                                "additionalProperties": false,
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "type": "object"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "selfsignedClusterIssuers",
                        "caClusterIssuers"
                    ],
                    "type": "object"
                }
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "selfsignedClusterIssuers: \n  {{ toYaml .Parameters.selfsignedClusterIssuers  | nindent 10 }}\ncaClusterIssuers: \n  {{ toYaml .Parameters.caClusterIssuers  | nindent 10 }}\n",
            "allowValues": false,
            "allowCreateNamespace": false,
            "roles": [
                "certManager"
            ],
            "dependsOn": [
                "certManagerTrust"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/certmanager.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": false,
                "properties": {
                    "caClusterIssuers": {
                        "items": {
                            "additionalProperties": false,
                            "properties": {
                                "ca_crt": {
                                    "type": "string"
                                },
                                "ca_key": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "ca_crt",
                                "ca_key"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "selfsignedClusterIssuers": {
                        "items": {
                            "additionalProperties": false,
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "selfsignedClusterIssuers",
                    "caClusterIssuers"
                ],
                "type": "object"
            },
            "releases": [
                "cert-manager-issuers"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "minio",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true,
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                },
                "source": {
                    "interval": "2m"
                },
                "timeout": "5m",
                "upgrade": {
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                }
            },
            "suspended": false,
            "protected": true,
            "source": {
                "allowedVersions": [
                    "5.2.0"
                ],
                "defaultVersion": "5.2.0",
                "gitRepository": {
                    "name": "kad-components",
                    "path": "./charts/minio/{version}/",
                    "unmanaged": false,
                    "namespace": ""
                },
                "ociRepository": null,
                "helmRepository": null
            },
            "parameters": {
                "buckets": [],
                "ingressName": null,
                "ingressUnsec": {
                    "enabled": false,
                    "host": null
                },
                "ldap": null,
                "rootPassword": null,
                "rootUser": null,
                "storage": {
                    "driveSize": null,
                    "drivesPerNode": 1,
                    "pools": 1,
                    "replicas": null
                }
            },
            "parametersSchema": {
                "File": "_schemas_/parameters/minio.yaml",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "_schemas_/context/minio.yaml",
                "Json": "",
                "Yaml": null
            },
            "values": "{{- if dig \"kyverno\" \"namespace\" \"\" .Context }}\nkyverno:\n  namespace: {{ .Context.kyverno.namespace }}\n{{- end }}\nminio:\n  rootUser: {{ .Parameters.rootUser }}\n  rootPassword: {{ .Parameters.rootPassword }}\n  clusterIssuer: {{ .Context.certificateIssuer.internal }}\n  tls:\n    enabled: true\n  persistence:\n    storageClass: {{ .Context.storageClass.data }}\n    size: {{ .Parameters.storage.driveSize }}\n  drivesPerNode: {{ .Parameters.storage.drivesPerNode }}\n  replicas: {{ .Parameters.storage.replicas }}\n  mode: {{ if ne .Parameters.storage.replicas 1 }}distributed{{else}}standalone{{end}}\n  pools: {{ .Parameters.storage.pools }}\n  ingress:\n    hosts:\n      - {{ required \".Parameters.ingressName is required\" .Parameters.ingressName }}.{{ .Context.ingress.url }}\n  consoleIngress:\n    annotations:\n      cert-manager.io/cluster-issuer: {{ .Context.certificateIssuer.public }}\n    hosts:\n      - {{ .Parameters.ingressName}}-console.{{ .Context.ingress.url }}\n    tls:\n      - secretName: {{ .Meta.componentRelease.name }}-console-tls\n        hosts:\n          - {{ .Parameters.ingressName}}-console.{{ .Context.ingress.url }}\n  ingressExt:\n    enabled: {{ ne .Context.certificateIssuer.public .Context.certificateIssuer.internal }}\n    clusterIssuer: {{ .Context.certificateIssuer.public }}\n    host: {{ .Parameters.ingressName }}-ext.{{ .Context.ingress.url }}\n  {{- if .Parameters.ingressUnsec.enabled }}\n  ingressUnsec:\n    enabled: true\n    host: {{ .Parameters.ingressName }}-unsec.{{ .Context.ingress.url }}\n  {{- end }}\n  {{- if and .Parameters.topology .Context.minio }}\n  {{- if .Context.minio.topologies }}\n  {{- $topology := get .Context.minio.topologies .Parameters.topology }}\n  topologySpreadConstraints:\n    - maxSkew: 1\n      whenUnsatisfiable: DoNotSchedule\n      topologyKey: \"{{ $topology.topologyKey }}\"\n      #nodeAffinityPolicy: Honor\n      labelSelector:\n        matchLabels:\n          app: minio\n      #matchLabelKeys:\n      #  - controller-revision-hash\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n          - matchExpressions:\n              - key: \"{{ $topology.topologyKey }}\"\n                operator: In\n                values:\n                  {{- toYaml $topology.zones | nindent 24 }}\n  {{- end }}\n  {{- end }}\n  {{- if .Parameters.ldap }}\n  {{- toYaml (get .Context.minio.ldapSettings  .Parameters.ldap ) | nindent 2 }}\n  {{- end }}\n  buckets: \n    {{ toYaml .Parameters.buckets | nindent 2}}\n  resources:\n    requests:\n      memory: 200Mi # Create a parameter for this\n  users: []\n",
            "allowValues": true,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": [
                "ingress",
                "blockStorage"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/minio.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": false,
                "properties": {
                    "buckets": {
                        "items": {
                            "additionalProperties": false,
                            "properties": {
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "ingressName": {
                        "type": "string"
                    },
                    "ingressUnsec": {
                        "additionalProperties": false,
                        "if": {
                            "properties": {
                                "enabled": {
                                    "const": true
                                }
                            },
                            "required": [
                                "host"
                            ]
                        },
                        "properties": {
                            "enabled": {
                                "type": "boolean"
                            },
                            "host": {
                                "type": [
                                    "string",
                                    "null"
                                ]
                            }
                        },
                        "required": [
                            "enabled"
                        ],
                        "type": "object"
                    },
                    "ldap": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "rootPassword": {
                        "type": "string"
                    },
                    "rootUser": {
                        "type": "string"
                    },
                    "storage": {
                        "additionalProperties": false,
                        "properties": {
                            "driveSize": {
                                "pattern": "^[0-9]+k|M|G|T|P|E|Ki|Mi|Gi|Ti|Pi|Ei",
                                "type": "string"
                            },
                            "drivesPerNode": {
                                "type": "integer"
                            },
                            "pools": {
                                "type": "integer"
                            },
                            "replicas": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "driveSize",
                            "replicas",
                            "drivesPerNode",
                            "pools"
                        ],
                        "type": "object"
                    }
                },
                "required": [
                    "rootUser",
                    "rootPassword",
                    "storage",
                    "ingressName"
                ],
                "type": "object"
            },
            "releases": [
                "minio1"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "cert:trust-manager",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": null,
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "v0.9.2"
                ],
                "defaultVersion": "v0.9.2",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://charts.jetstack.io",
                    "chart": "trust-manager",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": {
                "trustNamespace": null
            },
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": {
                    "$schema": "http://json-schema.org/schema#",
                    "additionalProperties": false,
                    "properties": {
                        "trustNamespace": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "trustNamespace"
                    ],
                    "type": "object"
                }
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "app:\n  trust:\n    namespace: {{ .Parameters.trustNamespace }}\nsecretTargets:\n  enabled: false\n",
            "allowValues": false,
            "allowCreateNamespace": false,
            "roles": [
                "certManagerTrust"
            ],
            "dependsOn": [
                "certManagerBase"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/certmanager.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": false,
                "properties": {
                    "trustNamespace": {
                        "type": "string"
                    }
                },
                "required": [
                    "trustNamespace"
                ],
                "type": "object"
            },
            "releases": [
                "cert-manager-trust"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "ingress-nginx",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true,
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                },
                "timeout": "1m",
                "upgrade": {
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "4.10.0"
                ],
                "defaultVersion": "4.10.0",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://kubernetes.github.io/ingress-nginx",
                    "chart": "ingress-nginx",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": {
                "loadBalancerFixedIp": null
            },
            "parametersSchema": {
                "File": "_schemas_/parameters/ingress-nginx.yaml",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "controller:\n  service:\n    annotations:\n    {{- if .Parameters.loadBalancerFixedIp }}\n      metallb.universe.tf/loadBalancerIPs: {{ .Parameters.loadBalancerFixedIp }}\n      metallb.universe.tf/allow-shared-ip: \"ingress\"\n    {{- end }}\n  extraArgs:\n    enable-ssl-passthrough: true\n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": [
                "ingress",
                "ingress-nginx"
            ],
            "dependsOn": [
                "certManager",
                "loadBalancer"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/ingress.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": false,
                "properties": {
                    "loadBalancerFixedIp": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "releases": [
                "ingress-nginx"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "kad-webserver",
            "version": "1.0.0",
            "catalogs": [
                "system"
            ],
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": null,
            "suspended": false,
            "protected": true,
            "source": {
                "allowedVersions": [
                    "0.4.0-snapshot"
                ],
                "defaultVersion": "0.4.0-snapshot",
                "gitRepository": null,
                "ociRepository": {
                    "url": "oci://quay.io/kubotal/charts/kad-webserver",
                    "insecure": false,
                    "tmpl__": {
                        "Name": "ociRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1m",
                    "secretRef": "",
                    "certSecretRef": ""
                },
                "helmRepository": null
            },
            "parameters": {
                "certificateIssuer": null,
                "debug": false,
                "ingressHost": null
            },
            "parametersSchema": {
                "File": "_schemas_/parameters/kad-webserver.yaml",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "replicaCount: 1\nclusterIssuer: {{ .Parameters.certificateIssuer }}\ningress:\n  host: {{ .Parameters.ingressHost }}\n{{- if .Parameters.debug }}\nlogger:\n  mode: dev\n  level: debug\nimage:\n  pullPolicy: Always\nwebConfig:\n  refreshPeriod: 1m\n{{- end }}\n",
            "allowValues": false,
            "allowCreateNamespace": false,
            "roles": null,
            "dependsOn": [
                "ingress"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/kad-webserver.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": true,
                "properties": {
                    "certificateIssuer": {
                        "type": "string"
                    },
                    "ingressHost": {
                        "type": "string"
                    }
                },
                "required": [
                    "ingressHost",
                    "certificateIssuer"
                ],
                "type": "object"
            },
            "releases": [
                "kad-webserver"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "metallb",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "0.14.4"
                ],
                "defaultVersion": "0.14.4",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://metallb.github.io/metallb",
                    "chart": "metallb",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": null,
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": null,
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": [
                "loadBalancerBase"
            ],
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/system/metallb.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "metallb"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "tools:secret-generator",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "3.4.0"
                ],
                "defaultVersion": "3.4.0",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://helm.mittwald.de",
                    "chart": "kubernetes-secret-generator",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": null,
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": {
                "fullnameOverride": "secret-generator",
                "podSecurityContext": {
                    "fsGroup": 2000,
                    "seccompProfile": {
                        "type": "RuntimeDefault"
                    }
                },
                "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                        "drop": [
                            "ALL"
                        ]
                    },
                    "readOnlyRootFilesystem": true,
                    "runAsNonRoot": true,
                    "runAsUser": 1000
                }
            },
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/tools.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "tools-secret-generator"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "spark-history-server",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "1.0.0"
                ],
                "defaultVersion": "1.0.0",
                "gitRepository": null,
                "ociRepository": {
                    "url": "oci://quay.io/sergealexandre/spark-history-server/chart/spark-history-server",
                    "insecure": false,
                    "tmpl__": {
                        "Name": "ociRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "10m",
                    "secretRef": "",
                    "certSecretRef": ""
                },
                "helmRepository": null
            },
            "parameters": {
                "adminGroups": null,
                "eventLogDir": null,
                "ingressPrefix": "shs",
                "oidc": {
                    "cipherSecretKey": "FC5E81345CED0E256DC42E410362FF6E"
                },
                "s3": {
                    "accessKey": null,
                    "secretKey": null,
                    "url": null
                }
            },
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "ingress:\n  enabled: true\n  ingressClassName: \"nginx\"\n  annotations:\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: {{ .Context.certificateIssuer.public }}\n  hosts:\n    - host: {{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}\n      paths:\n        - path: /\n          pathType: Prefix\n  tls:\n    - hosts:\n        - {{ .Parameters.ingressPrefix }}.{{ .Context.ingress.url }}\n      secretName: shs-teama-tls\nconfig:\n  spark.hadoop.fs.s3a.endpoint: {{ .Parameters.s3.url }}\n  spark.hadoop.fs.s3a.connection.ssl.enabled: true\n  spark.history.fs.logDirectory: {{ .Parameters.eventLogDir }}\n  spark.hadoop.fs.s3a.impl: org.apache.hadoop.fs.s3a.S3AFileSystem\n  spark.hadoop.fs.s3a.path.style.access: true\n  spark.ui.filters: io.okdp.spark.authc.OidcAuthFilter\n  spark.user.groups.mapping: io.okdp.spark.authz.OidcGroupMappingServiceProvider\n  spark.history.ui.acls.enable: true\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.issuer-uri: https://dex.{{ .Context.ingress.url }}\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.redirect-uri: https://shs.{{ .Context.ingress.url }}/home\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.scope: openid+profile+email+offline_access+groups\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-max-age-minutes: 480\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-cipher-secret-key: {{ .Parameters.oidc.cipherSecretKey }}\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.cookie-is-secure: true\n  spark.io.okdp.spark.authc.OidcAuthFilter.param.user-id: email # Or sub\n  # Members of this group will have access to all jobs.\n  spark.history.ui.admin.acls.groups: {{ .Parameters.adminGroups }}\nextraEnvs:\n  - name: AWS_ACCESS_KEY_ID\n    value: {{ .Parameters.s3.accessKey }}\n  - name: AWS_SECRET_ACCESS_KEY\n    value: {{ .Parameters.s3.secretKey }}\n  # Disable Certificate Checking\n  - name: SPARK_HISTORY_OPTS\n    value: \"-Dcom.amazonaws.sdk.disableCertChecking=true\"\n  - name: JAVA_TOOL_OPTIONS\n    value: \"-Djavax.net.ssl.trustStore=/cacerts/bundle.p12 -Djavax.net.ssl.trustStorePassword=\"\n  - name: AUTH_CLIENT_ID\n    value: \"shs\"\n  - name: AUTH_CLIENT_SECRET\n    value: \"AsjhDFJcnsdlkjrEdEF\"\nextraVolumes:\n  - name: cacerts\n    configMap:\n      name: root-certs.pem\nextraVolumeMounts:\n  - name: cacerts\n    mountPath: /cacerts\n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/spark-history-server.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "spark-history-server"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "dex",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "0.17.1"
                ],
                "defaultVersion": "0.17.1",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://charts.dexidp.io",
                    "chart": "dex",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": {
                "staticClients": []
            },
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "config:\n  # Set it to a valid URL\n  issuer: https://dex.ingress.kind.local\n\n  # See https://dexidp.io/docs/storage/ for more options\n  storage:\n    config:\n      inCluster: true\n    type: memory\n\n  logger:\n    level: \"debug\"\n  connectors:\n    - type: ldap\n      id: ldap\n      name: OPENLDAP\n      config:\n        host: openldap.openldap.svc\n        insecureNoSSL: false\n        rootCAData: \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUY3RENDQTlTZ0F3SUJBZ0lVSjUrenBuZ1hUdGx1TmI0Q2tXWlBiSjU2L1VRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1RqRUxNQWtHQTFVRUJoTUNSbEl4RGpBTUJnTlZCQWdNQlZCaGNtbHpNUTR3REFZRFZRUUhEQVZRWVhKcApjekVOTUFzR0ExVUVDd3dFUzJsdVpERVFNQTRHQTFVRUF3d0hZMkV1YTJsdVpEQWVGdzB5TkRBek1URXhNekk0Ck5URmFGdzB6TkRBek1Ea3hNekk0TlRGYU1FNHhDekFKQmdOVkJBWVRBa1pTTVE0d0RBWURWUVFJREFWUVlYSnAKY3pFT01Bd0dBMVVFQnd3RlVHRnlhWE14RFRBTEJnTlZCQXNNQkV0cGJtUXhFREFPQmdOVkJBTU1CMk5oTG10cApibVF3Z2dJaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRRGdYdEN6WUdrQkhnYXVWVkdSClRzRGF2czFDa3l1NjFCLzlnWmlYeVVjSkZRaFlKeHZTWXRtYklIYUN1U2ZpdXA3T1ZnU3BEMjJ5TElJZVI4Z1EKMklGOWRhL1VRNWkvSXlYK0F1bVQxTkZUYUNmclpORTZScVNIcnNvT29YQVRHRHlEeU56bUJTWnM4UGlZL1RiRQozTTdFc1ZmUE9FUFdTN0VDZXRWM2tkVG1yL1FBK3lpSEd5c2lSTmI4dENZS2ZMbWNoK0VoWmdRUUdxODJJWDhqCnFDY08zd1o0bTkzOEN1dFlBbllINktod3Qyb3dGMHJSQmpyZk1seUIwcjVFMkMvNjhDS2ZvYTJJN0RUL3dla0UKVGx3c3hEd3Q1L0o3SjVIYmtWQUtha2xPWlV6RjZ3YVVSU0xTekk0L1ZtSE5sVFJoVEczb0loY3RyODdpd3pDNwo1RG1EVW9VeTc5TTROZjdvV3VQUzdjNU1pZTVqWW9nK3E5dU4zZmhDT0FyTHhFWHFjTlVqQ1ZnRmZURG0rK3E4CkMyVXdMQlVwV2t4RzBnMXBnMDZpYjBxTFM1b0F3YjRCRCt0azFlL2Y5NE1BZ3lpSXVvSXlpSlRrVUluVThKT0oKdHpTWVlZYmJwaFl1bHZJL1RHWkE3S0phdUxabmFRdW9jWktIZ2E3dmNnaUpXVmdyK3hDdjc5dW1xOXpmRmtXVQo4UERCVko2YVhsREJLS2ZHUkQ0VmhZRDVWeEtlTU5MTjlESGJPUXlDLytvWitneDBmTVNUc1VZMm9uRnN0U1lGClNwMXJqVEtFalAzTXg4Q1l5NzZsT014Sjg4cWE5NWk3SUp1RGVRRE9Gb1duQjJoMTRhcHN0V1E2TkdxQUNXSngKSTQ5OEorS1h6aEQ3cDVaY0RyaEJvWnZhSVFJREFRQUJvNEhCTUlHK01BOEdBMVVkRXdFQi93UUZNQU1CQWY4dwpIUVlEVlIwT0JCWUVGR3pRZ2NkY2RaOE9RMWdQVFJ5RlJvVmQwMkpGTUlHTEJnTlZIU01FZ1lNd2dZQ0FGR3pRCmdjZGNkWjhPUTFnUFRSeUZSb1ZkMDJKRm9WS2tVREJPTVFzd0NRWURWUVFHRXdKR1VqRU9NQXdHQTFVRUNBd0YKVUdGeWFYTXhEakFNQmdOVkJBY01CVkJoY21sek1RMHdDd1lEVlFRTERBUkxhVzVrTVJBd0RnWURWUVFEREFkagpZUzVyYVc1a2doUW5uN09tZUJkTzJXNDF2Z0tSWms5c25ucjlSREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBZ0VBCmJtTWpSSGI2N0RJdy9RRjR4UjJtTXVOU1ZjbE5PbGx2dHNmOWxQaHpUVktPc1pJdUJkMVpjNjNNVW1GcUdRejQKdkxMczlma2VDb0Q3UTUzVStYY3JXT2cvUk9ZWGhhKzZ6cDI3aUVPSVMrTlZxdE9ZQXVpUVZwS3cxRVhCY2NpNwpuOE1nMHdDOXhHYWJsVUIwblRrWmNQbktWSjZkUE5ncGJDbFQybitPemNHZGFvdnkvZ1g5SU11bnpabGdjZ2xsClBWV3VKWWdIZDBKUlc5RGZOMnh1Y1BkRWxwZ1NodGRTenJ5YlFrTUVNMEpoL1I1UXJlNmVzaE5tanMxNTZja1AKaHpWRDFWL0k3NXlFdWVTKzNZZVJ5NS90M1c5MFZjVE5mYkZEd3huYXM1QnB3NWZ6MGxpM0h6Zm9BZ2tWZXV5aQpPWjROS0dUcStYdmJreDdmZG9PMnZidktJODBacVd0Zi81T3dEcU9ETXo5M1RLUEpZa0JYR012N2ZBcXNkdUN4Cnk0SEt4bHh6YVdnUmo5RHdyaVRBdFZRdDdXZkhhNmoyVVYvNGY5Rll6K0MwRG1mSGhYb2FvRnFGMFBLbjFCdk0KNnVzbitXM2RjK2VQV0FPKzlEK01udnp0QTNlQTRzcVhSWFM5RGpsZTY5QU1JblJmNk5oR2gxNndFNmhscjFtbQp1M21aZ2c3eUtZazVHM2RWSC9ydElxeTFiSXg1djdPYk9CVEY3d0t5empTNERsLzRENzE3YmtrS3lIK0JKMFRNCkZFa3BjdWIzZWhNYURZMExkblF3cUJXUG1xQTBDNE9VSnd6UzhqdUFLR3BQc0ovcHU4dnNrM2R4SjZ4VjZqYkcKaVFoSVZGbjR2ZWlIUm9iUmNMWTBCQXJkMTBodUtwTWJxMUZVbWhWSm9wbz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==\"\n        bindDN: cn=admin,dc=okdp,dc=io\n        bindPW: admin123\n        userSearch:\n          baseDN: ou=Users,dc=okdp,dc=io\n          filter: (objectClass=inetOrgPerson)\n          username: uid\n          idAttr: uid\n          emailAttr: mail\n          nameAttr: uid\n          emailSuffix: okdp.io\n        groupSearch:\n          baseDN: ou=Groups,dc=okdp,dc=io\n          filter: (objectClass=posixgroup)\n          userMatchers:\n            - userAttr: uid\n              groupAttr: memberUid\n          nameAttr: cn\n  staticClients:\n    {{ toYaml .Parameters.staticClients | nindent 4 }}\ningress:\n  enabled: true\n  className: \"nginx\"\n  annotations:\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"my-public-ca\"\n  hosts:\n    - host: dex.ingress.kind.local\n      paths:\n        - path: /\n          pathType: ImplementationSpecific\n  tls:\n    - secretName: dex-tls\n      hosts:\n        - dex.ingress.kind.local  \n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": [
                "oidcProvider"
            ],
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/system/dex.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "dex"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "metallb-pool",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true,
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                },
                "timeout": "1m",
                "upgrade": {
                    "remediation": {
                        "remediateLastFailure": true,
                        "retries": 30
                    }
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "0.1.0"
                ],
                "defaultVersion": "0.1.0",
                "gitRepository": {
                    "name": "kad-components",
                    "path": "./charts/metallb-pool/{version}",
                    "unmanaged": false,
                    "namespace": ""
                },
                "ociRepository": null,
                "helmRepository": null
            },
            "parameters": {
                "addresses": null
            },
            "parametersSchema": {
                "File": "_schemas_/parameters/metallb-pool.yaml",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": "addresses: {{ .Parameters.addresses }}\n",
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": [
                "loadBalancer"
            ],
            "dependsOn": [
                "loadBalancerBase"
            ]
        },
        "status": {
            "file": "/work/kad-components/components/system/metallb.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": {
                "$schema": "http://json-schema.org/schema#",
                "additionalProperties": false,
                "properties": {
                    "addresses": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "addresses"
                ],
                "title": "MetalLB-Pool",
                "type": "object"
            },
            "releases": [
                "metallb-pool"
            ],
            "title": ""
        }
    },
    {
        "kind": "component",
        "spec": {
            "name": "tools:reloader",
            "version": "1.0.0",
            "catalogs": null,
            "usage": "",
            "tmpl__": {
                "Name": "helmRelease",
                "Version": "1.0.0"
            },
            "config": {
                "install": {
                    "createNamespace": true
                }
            },
            "suspended": false,
            "protected": false,
            "source": {
                "allowedVersions": [
                    "1.0.72"
                ],
                "defaultVersion": "1.0.72",
                "gitRepository": null,
                "ociRepository": null,
                "helmRepository": {
                    "url": "https://stakater.github.io/stakater-charts",
                    "chart": "reloader",
                    "tmpl__": {
                        "Name": "helmRepository",
                        "Version": "1.0.0"
                    },
                    "interval": "1h",
                    "secretRef": "",
                    "certSecretRef": ""
                }
            },
            "parameters": null,
            "parametersSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "contextSchema": {
                "File": "",
                "Json": "",
                "Yaml": null
            },
            "values": {
                "reloader": {
                    "deployment": {
                        "containerSecurityContext": {
                            "allowPrivilegeEscalation": false,
                            "capabilities": {
                                "drop": [
                                    "ALL"
                                ]
                            },
                            "readOnlyRootFilesystem": true
                        },
                        "securityContext": {
                            "seccompProfile": {
                                "type": "RuntimeDefault"
                            }
                        }
                    }
                }
            },
            "allowValues": false,
            "allowCreateNamespace": true,
            "roles": null,
            "dependsOn": null
        },
        "status": {
            "file": "/work/kad-components/components/tools.yaml",
            "path": "/loader:kad-components[kad-components]",
            "error": "",
            "parametersSchema": null,
            "releases": [
                "tools-reloader"
            ],
            "title": ""
        }
    }
]


